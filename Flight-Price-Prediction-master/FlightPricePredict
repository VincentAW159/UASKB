{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.087426,
     "end_time": "2021-02-02T12:55:48.407324",
     "exception": false,
     "start_time": "2021-02-02T12:55:48.319898",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### AIR TICKET FARE PREDICTION - MISHA DEY - 1828166"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2021-02-02T12:55:48.584824Z",
     "iopub.status.busy": "2021-02-02T12:55:48.584051Z",
     "iopub.status.idle": "2021-02-02T12:55:48.641824Z",
     "shell.execute_reply": "2021-02-02T12:55:48.642397Z"
    },
    "papermill": {
     "duration": 0.150278,
     "end_time": "2021-02-02T12:55:48.642839",
     "exception": false,
     "start_time": "2021-02-02T12:55:48.492561",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'./Sample_Submission.csv'"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from shutil import copy\n",
    "copy('../input/air-ticket-fare-prediction/Test.csv','./Test.csv')\n",
    "copy('../input/air-ticket-fare-prediction/Train.csv','./Train.csv')\n",
    "copy('../input/air-ticket-fare-prediction/Sample_Submission.csv','./Sample_Submission.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:55:48.830798Z",
     "iopub.status.busy": "2021-02-02T12:55:48.829912Z",
     "iopub.status.idle": "2021-02-02T12:55:51.582438Z",
     "shell.execute_reply": "2021-02-02T12:55:51.581729Z"
    },
    "papermill": {
     "duration": 2.852083,
     "end_time": "2021-02-02T12:55:51.582621",
     "exception": false,
     "start_time": "2021-02-02T12:55:48.730538",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import gc\n",
    "import math\n",
    "import PIL \n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn \n",
    "import datetime\n",
    "import random\n",
    "import warnings\n",
    "import holidays\n",
    "import datetime\n",
    "import xgboost as xgb\n",
    "from scipy import stats\n",
    "from pandas.tseries.holiday import USFederalHolidayCalendar as calendar\n",
    "from sklearn.linear_model import LinearRegression,Ridge,Lasso\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.utils import shuffle\n",
    "from sklearn.model_selection import train_test_split , GridSearchCV,cross_val_score,cross_val_predict,cross_validate,RandomizedSearchCV\n",
    "from sklearn.metrics import mean_squared_error,mean_absolute_error,explained_variance_score,max_error,r2_score,median_absolute_error,mean_squared_log_error\n",
    "from sklearn.feature_selection import VarianceThreshold,SelectKBest,f_regression\n",
    "from sklearn.preprocessing import MinMaxScaler,normalize,StandardScaler,RobustScaler\n",
    "from sklearn.preprocessing import OneHotEncoder,LabelEncoder\n",
    "from sklearn.decomposition import PCA\n",
    "import featuretools as ft\n",
    "from sklearn.svm import SVR\n",
    "from mlxtend.feature_selection import SequentialFeatureSelector,ExhaustiveFeatureSelector"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.085594,
     "end_time": "2021-02-02T12:55:51.755792",
     "exception": false,
     "start_time": "2021-02-02T12:55:51.670198",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### EXPLORATORY DATA ANALYSIS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:55:51.966510Z",
     "iopub.status.busy": "2021-02-02T12:55:51.965305Z",
     "iopub.status.idle": "2021-02-02T12:55:52.012098Z",
     "shell.execute_reply": "2021-02-02T12:55:52.011174Z"
    },
    "papermill": {
     "duration": 0.162499,
     "end_time": "2021-02-02T12:55:52.012284",
     "exception": false,
     "start_time": "2021-02-02T12:55:51.849785",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "test_data = pd.read_csv('Test.csv')\n",
    "train_data = pd.read_csv('Train.csv')\n",
    "sample_data = pd.read_csv('Sample_Submission.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:55:52.217861Z",
     "iopub.status.busy": "2021-02-02T12:55:52.216814Z",
     "iopub.status.idle": "2021-02-02T12:55:52.246748Z",
     "shell.execute_reply": "2021-02-02T12:55:52.246117Z"
    },
    "papermill": {
     "duration": 0.140891,
     "end_time": "2021-02-02T12:55:52.246919",
     "exception": false,
     "start_time": "2021-02-02T12:55:52.106028",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Date_of_Journey</th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Dep_Time</th>\n",
       "      <th>Arrival_Time</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>09-04-2019</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>04:00</td>\n",
       "      <td>06:50</td>\n",
       "      <td>2h 50m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>3943.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>03-06-2019</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>08:30</td>\n",
       "      <td>11:20</td>\n",
       "      <td>2h 50m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>4823.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>09-06-2019</td>\n",
       "      <td>Mumbai</td>\n",
       "      <td>Hyderabad</td>\n",
       "      <td>19:35</td>\n",
       "      <td>21:05</td>\n",
       "      <td>1h 30m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>In-flight meal not included</td>\n",
       "      <td>3210.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Multiple carriers</td>\n",
       "      <td>27-05-2019</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>12:50</td>\n",
       "      <td>21:00</td>\n",
       "      <td>8h 10m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>7005.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Air India</td>\n",
       "      <td>06-06-2019</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>06:50</td>\n",
       "      <td>07-06-2021 07:40</td>\n",
       "      <td>24h 50m</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>13381.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Airline Date_of_Journey    Source Destination Dep_Time  \\\n",
       "0             IndiGo      09-04-2019  Banglore       Delhi    04:00   \n",
       "1             IndiGo      03-06-2019  Banglore       Delhi    08:30   \n",
       "2        Jet Airways      09-06-2019    Mumbai   Hyderabad    19:35   \n",
       "3  Multiple carriers      27-05-2019     Delhi      Cochin    12:50   \n",
       "4          Air India      06-06-2019     Delhi      Cochin    06:50   \n",
       "\n",
       "       Arrival_Time Duration Total_Stops              Additional_Info    Price  \n",
       "0             06:50   2h 50m    non-stop                      No info   3943.0  \n",
       "1             11:20   2h 50m    non-stop                      No info   4823.0  \n",
       "2             21:05   1h 30m    non-stop  In-flight meal not included   3210.0  \n",
       "3             21:00   8h 10m      1 stop                      No info   7005.0  \n",
       "4  07-06-2021 07:40  24h 50m     2 stops                      No info  13381.0  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:55:52.442903Z",
     "iopub.status.busy": "2021-02-02T12:55:52.441764Z",
     "iopub.status.idle": "2021-02-02T12:55:52.446053Z",
     "shell.execute_reply": "2021-02-02T12:55:52.446699Z"
    },
    "papermill": {
     "duration": 0.11364,
     "end_time": "2021-02-02T12:55:52.446914",
     "exception": false,
     "start_time": "2021-02-02T12:55:52.333274",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Date_of_Journey</th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Dep_Time</th>\n",
       "      <th>Arrival_Time</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>SpiceJet</td>\n",
       "      <td>12-05-2019</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>15:05</td>\n",
       "      <td>20:20</td>\n",
       "      <td>5h 15m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Air India</td>\n",
       "      <td>15-03-2019</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>18:05</td>\n",
       "      <td>21:10</td>\n",
       "      <td>3h 5m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>24-06-2019</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>11:45</td>\n",
       "      <td>25-06-2021 04:25</td>\n",
       "      <td>16h 40m</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>SpiceJet</td>\n",
       "      <td>21-06-2019</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>09:00</td>\n",
       "      <td>11:25</td>\n",
       "      <td>2h 25m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>27-04-2019</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>14:25</td>\n",
       "      <td>16:55</td>\n",
       "      <td>2h 30m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Airline Date_of_Journey   Source Destination Dep_Time  \\\n",
       "0     SpiceJet      12-05-2019  Kolkata    Banglore    15:05   \n",
       "1    Air India      15-03-2019    Delhi      Cochin    18:05   \n",
       "2  Jet Airways      24-06-2019    Delhi      Cochin    11:45   \n",
       "3     SpiceJet      21-06-2019  Kolkata    Banglore    09:00   \n",
       "4       IndiGo      27-04-2019  Kolkata    Banglore    14:25   \n",
       "\n",
       "       Arrival_Time Duration Total_Stops Additional_Info  \n",
       "0             20:20   5h 15m      1 stop         No info  \n",
       "1             21:10    3h 5m    non-stop         No info  \n",
       "2  25-06-2021 04:25  16h 40m     2 stops         No info  \n",
       "3             11:25   2h 25m    non-stop         No info  \n",
       "4             16:55   2h 30m    non-stop         No info  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:55:52.633210Z",
     "iopub.status.busy": "2021-02-02T12:55:52.632028Z",
     "iopub.status.idle": "2021-02-02T12:55:52.645353Z",
     "shell.execute_reply": "2021-02-02T12:55:52.645982Z"
    },
    "papermill": {
     "duration": 0.111873,
     "end_time": "2021-02-02T12:55:52.646197",
     "exception": false,
     "start_time": "2021-02-02T12:55:52.534324",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>13357.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2000.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Price\n",
       "0   1000.0\n",
       "1   2000.0\n",
       "2  13357.0\n",
       "3   2000.0\n",
       "4   2000.0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sample_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:55:52.825687Z",
     "iopub.status.busy": "2021-02-02T12:55:52.824621Z",
     "iopub.status.idle": "2021-02-02T12:55:52.842662Z",
     "shell.execute_reply": "2021-02-02T12:55:52.842033Z"
    },
    "papermill": {
     "duration": 0.108414,
     "end_time": "2021-02-02T12:55:52.842843",
     "exception": false,
     "start_time": "2021-02-02T12:55:52.734429",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>8533.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>9033.123403</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>4350.362526</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1759.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>5276.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>8372.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>12373.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>31945.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Price\n",
       "count   8533.000000\n",
       "mean    9033.123403\n",
       "std     4350.362526\n",
       "min     1759.000000\n",
       "25%     5276.000000\n",
       "50%     8372.000000\n",
       "75%    12373.000000\n",
       "max    31945.000000"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:55:53.034998Z",
     "iopub.status.busy": "2021-02-02T12:55:53.034326Z",
     "iopub.status.idle": "2021-02-02T12:55:53.053018Z",
     "shell.execute_reply": "2021-02-02T12:55:53.053976Z"
    },
    "papermill": {
     "duration": 0.123357,
     "end_time": "2021-02-02T12:55:53.054217",
     "exception": false,
     "start_time": "2021-02-02T12:55:52.930860",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 8533 entries, 0 to 8532\n",
      "Data columns (total 10 columns):\n",
      " #   Column           Non-Null Count  Dtype  \n",
      "---  ------           --------------  -----  \n",
      " 0   Airline          8533 non-null   object \n",
      " 1   Date_of_Journey  8533 non-null   object \n",
      " 2   Source           8533 non-null   object \n",
      " 3   Destination      8533 non-null   object \n",
      " 4   Dep_Time         8533 non-null   object \n",
      " 5   Arrival_Time     8533 non-null   object \n",
      " 6   Duration         8533 non-null   object \n",
      " 7   Total_Stops      8533 non-null   object \n",
      " 8   Additional_Info  8533 non-null   object \n",
      " 9   Price            8533 non-null   float64\n",
      "dtypes: float64(1), object(9)\n",
      "memory usage: 666.8+ KB\n"
     ]
    }
   ],
   "source": [
    "train_data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.086465,
     "end_time": "2021-02-02T12:55:53.228169",
     "exception": false,
     "start_time": "2021-02-02T12:55:53.141704",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Removing the Null Values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:55:53.405767Z",
     "iopub.status.busy": "2021-02-02T12:55:53.405116Z",
     "iopub.status.idle": "2021-02-02T12:55:53.422233Z",
     "shell.execute_reply": "2021-02-02T12:55:53.422839Z"
    },
    "papermill": {
     "duration": 0.107852,
     "end_time": "2021-02-02T12:55:53.423017",
     "exception": false,
     "start_time": "2021-02-02T12:55:53.315165",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Airline            0\n",
       "Date_of_Journey    0\n",
       "Source             0\n",
       "Destination        0\n",
       "Dep_Time           0\n",
       "Arrival_Time       0\n",
       "Duration           0\n",
       "Total_Stops        0\n",
       "Additional_Info    0\n",
       "Price              0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.isnull().sum()   ## WE have no null values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.087509,
     "end_time": "2021-02-02T12:55:53.598806",
     "exception": false,
     "start_time": "2021-02-02T12:55:53.511297",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Removing the duplicate values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:55:53.781316Z",
     "iopub.status.busy": "2021-02-02T12:55:53.780646Z",
     "iopub.status.idle": "2021-02-02T12:55:53.790853Z",
     "shell.execute_reply": "2021-02-02T12:55:53.791370Z"
    },
    "papermill": {
     "duration": 0.103055,
     "end_time": "2021-02-02T12:55:53.791607",
     "exception": false,
     "start_time": "2021-02-02T12:55:53.688552",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Airline            0\n",
       "Date_of_Journey    0\n",
       "Source             0\n",
       "Destination        0\n",
       "Dep_Time           0\n",
       "Arrival_Time       0\n",
       "Duration           0\n",
       "Total_Stops        0\n",
       "Additional_Info    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:55:53.974891Z",
     "iopub.status.busy": "2021-02-02T12:55:53.974206Z",
     "iopub.status.idle": "2021-02-02T12:55:53.989832Z",
     "shell.execute_reply": "2021-02-02T12:55:53.990400Z"
    },
    "papermill": {
     "duration": 0.109762,
     "end_time": "2021-02-02T12:55:53.990622",
     "exception": false,
     "start_time": "2021-02-02T12:55:53.880860",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "147"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:55:54.173419Z",
     "iopub.status.busy": "2021-02-02T12:55:54.172734Z",
     "iopub.status.idle": "2021-02-02T12:55:54.189257Z",
     "shell.execute_reply": "2021-02-02T12:55:54.188629Z"
    },
    "papermill": {
     "duration": 0.109995,
     "end_time": "2021-02-02T12:55:54.189445",
     "exception": false,
     "start_time": "2021-02-02T12:55:54.079450",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_data = train_data.drop_duplicates()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:55:54.373696Z",
     "iopub.status.busy": "2021-02-02T12:55:54.372951Z",
     "iopub.status.idle": "2021-02-02T12:55:54.377076Z",
     "shell.execute_reply": "2021-02-02T12:55:54.376293Z"
    },
    "papermill": {
     "duration": 0.098743,
     "end_time": "2021-02-02T12:55:54.377235",
     "exception": false,
     "start_time": "2021-02-02T12:55:54.278492",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8386, 10)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:55:54.558882Z",
     "iopub.status.busy": "2021-02-02T12:55:54.558020Z",
     "iopub.status.idle": "2021-02-02T12:55:54.563403Z",
     "shell.execute_reply": "2021-02-02T12:55:54.564059Z"
    },
    "papermill": {
     "duration": 0.097981,
     "end_time": "2021-02-02T12:55:54.564234",
     "exception": false,
     "start_time": "2021-02-02T12:55:54.466253",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_data_1 = train_data.copy()\n",
    "test_data_1 = test_data.copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.089919,
     "end_time": "2021-02-02T12:55:54.743175",
     "exception": false,
     "start_time": "2021-02-02T12:55:54.653256",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### FILTERING OUT THE CONSTANT FEATURES"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:55:54.933807Z",
     "iopub.status.busy": "2021-02-02T12:55:54.933062Z",
     "iopub.status.idle": "2021-02-02T12:55:54.972749Z",
     "shell.execute_reply": "2021-02-02T12:55:54.973805Z"
    },
    "papermill": {
     "duration": 0.140151,
     "end_time": "2021-02-02T12:55:54.974108",
     "exception": false,
     "start_time": "2021-02-02T12:55:54.833957",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      "Constant Features are   : []\n",
      "\n",
      "\n",
      "ALL FEATURES WITH UNIQUE VALUES : \n",
      "\n"
     ]
    }
   ],
   "source": [
    "const_feature = []\n",
    "uniq_val_count = []\n",
    "unique_cols = dict()\n",
    "for col in list(train_data.columns):\n",
    "    uniq_val_count.append(train_data[col].nunique())\n",
    "    if(train_data[col].nunique()==1):\n",
    "        const_feature.append(col)\n",
    "    \n",
    "print('\\n\\n\\nConstant Features are   :',const_feature)\n",
    "print('\\n\\nALL FEATURES WITH UNIQUE VALUES : \\n')\n",
    "pd.DataFrame({'COLUMN NAMES':list(train_data.columns) ,'UNIQUE VALUES COUNT':uniq_val_count})\n",
    "\n",
    "\n",
    "# Removing the constant feature\n",
    "train_data=train_data.drop(columns=const_feature)\n",
    "\n",
    "# Removing the constant feature\n",
    "test_data=test_data.drop(columns=const_feature)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:55:55.162406Z",
     "iopub.status.busy": "2021-02-02T12:55:55.161723Z",
     "iopub.status.idle": "2021-02-02T12:55:55.164417Z",
     "shell.execute_reply": "2021-02-02T12:55:55.163898Z"
    },
    "papermill": {
     "duration": 0.098708,
     "end_time": "2021-02-02T12:55:55.164582",
     "exception": false,
     "start_time": "2021-02-02T12:55:55.065874",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Hence We don't need to remove any Value"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.089887,
     "end_time": "2021-02-02T12:55:55.345887",
     "exception": false,
     "start_time": "2021-02-02T12:55:55.256000",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### LABEL ENCODING OF CATEGORICAL FEATURES"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:55:55.529355Z",
     "iopub.status.busy": "2021-02-02T12:55:55.528678Z",
     "iopub.status.idle": "2021-02-02T12:55:55.550613Z",
     "shell.execute_reply": "2021-02-02T12:55:55.551217Z"
    },
    "papermill": {
     "duration": 0.115502,
     "end_time": "2021-02-02T12:55:55.551436",
     "exception": false,
     "start_time": "2021-02-02T12:55:55.435934",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Date_of_Journey</th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Dep_Time</th>\n",
       "      <th>Arrival_Time</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>09-04-2019</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>04:00</td>\n",
       "      <td>06:50</td>\n",
       "      <td>2h 50m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>3943.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>03-06-2019</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>08:30</td>\n",
       "      <td>11:20</td>\n",
       "      <td>2h 50m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>4823.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>09-06-2019</td>\n",
       "      <td>Mumbai</td>\n",
       "      <td>Hyderabad</td>\n",
       "      <td>19:35</td>\n",
       "      <td>21:05</td>\n",
       "      <td>1h 30m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>In-flight meal not included</td>\n",
       "      <td>3210.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Multiple carriers</td>\n",
       "      <td>27-05-2019</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>12:50</td>\n",
       "      <td>21:00</td>\n",
       "      <td>8h 10m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>7005.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Air India</td>\n",
       "      <td>06-06-2019</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>06:50</td>\n",
       "      <td>07-06-2021 07:40</td>\n",
       "      <td>24h 50m</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>13381.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8528</th>\n",
       "      <td>Air India</td>\n",
       "      <td>09-03-2019</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>22:00</td>\n",
       "      <td>10-03-2021 19:15</td>\n",
       "      <td>21h 15m</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>16373.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8529</th>\n",
       "      <td>Vistara</td>\n",
       "      <td>27-05-2019</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>17:00</td>\n",
       "      <td>19:35</td>\n",
       "      <td>2h 35m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>4878.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8530</th>\n",
       "      <td>Vistara</td>\n",
       "      <td>24-03-2019</td>\n",
       "      <td>Chennai</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>07:05</td>\n",
       "      <td>09:20</td>\n",
       "      <td>2h 15m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>4842.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8531</th>\n",
       "      <td>Air India</td>\n",
       "      <td>09-03-2019</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>04:00</td>\n",
       "      <td>10-03-2021 07:40</td>\n",
       "      <td>27h 40m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>10315.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8532</th>\n",
       "      <td>GoAir</td>\n",
       "      <td>24-03-2019</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>22:25</td>\n",
       "      <td>25-03-2021 07:40</td>\n",
       "      <td>9h 15m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>10091.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8386 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                Airline Date_of_Journey    Source Destination Dep_Time  \\\n",
       "0                IndiGo      09-04-2019  Banglore       Delhi    04:00   \n",
       "1                IndiGo      03-06-2019  Banglore       Delhi    08:30   \n",
       "2           Jet Airways      09-06-2019    Mumbai   Hyderabad    19:35   \n",
       "3     Multiple carriers      27-05-2019     Delhi      Cochin    12:50   \n",
       "4             Air India      06-06-2019     Delhi      Cochin    06:50   \n",
       "...                 ...             ...       ...         ...      ...   \n",
       "8528          Air India      09-03-2019     Delhi      Cochin    22:00   \n",
       "8529            Vistara      27-05-2019  Banglore       Delhi    17:00   \n",
       "8530            Vistara      24-03-2019   Chennai     Kolkata    07:05   \n",
       "8531          Air India      09-03-2019     Delhi      Cochin    04:00   \n",
       "8532              GoAir      24-03-2019   Kolkata    Banglore    22:25   \n",
       "\n",
       "          Arrival_Time Duration Total_Stops              Additional_Info  \\\n",
       "0                06:50   2h 50m    non-stop                      No info   \n",
       "1                11:20   2h 50m    non-stop                      No info   \n",
       "2                21:05   1h 30m    non-stop  In-flight meal not included   \n",
       "3                21:00   8h 10m      1 stop                      No info   \n",
       "4     07-06-2021 07:40  24h 50m     2 stops                      No info   \n",
       "...                ...      ...         ...                          ...   \n",
       "8528  10-03-2021 19:15  21h 15m     2 stops                      No info   \n",
       "8529             19:35   2h 35m    non-stop                      No info   \n",
       "8530             09:20   2h 15m    non-stop                      No info   \n",
       "8531  10-03-2021 07:40  27h 40m      1 stop                      No info   \n",
       "8532  25-03-2021 07:40   9h 15m      1 stop                      No info   \n",
       "\n",
       "        Price  \n",
       "0      3943.0  \n",
       "1      4823.0  \n",
       "2      3210.0  \n",
       "3      7005.0  \n",
       "4     13381.0  \n",
       "...       ...  \n",
       "8528  16373.0  \n",
       "8529   4878.0  \n",
       "8530   4842.0  \n",
       "8531  10315.0  \n",
       "8532  10091.0  \n",
       "\n",
       "[8386 rows x 10 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:55:55.737443Z",
     "iopub.status.busy": "2021-02-02T12:55:55.736721Z",
     "iopub.status.idle": "2021-02-02T12:55:55.743353Z",
     "shell.execute_reply": "2021-02-02T12:55:55.743918Z"
    },
    "papermill": {
     "duration": 0.100981,
     "end_time": "2021-02-02T12:55:55.744151",
     "exception": false,
     "start_time": "2021-02-02T12:55:55.643170",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "### Assign 0 for unknown classes\n",
    "\n",
    "class LabelEncoderExt(object):\n",
    "    def __init__(self):\n",
    "        self.label_encoder = LabelEncoder()\n",
    "\n",
    "    def fit(self, data_list):\n",
    "        self.label_encoder = self.label_encoder.fit(list(data_list) + ['Unknown'])\n",
    "        self.classes_ = self.label_encoder.classes_\n",
    "        return self\n",
    "\n",
    "    def transform(self, data_list):\n",
    "        new_data_list = list(data_list)\n",
    "        for unique_item in np.unique(data_list):\n",
    "            if unique_item not in self.label_encoder.classes_:\n",
    "                new_data_list = ['Unknown' if x==unique_item else x for x in new_data_list]\n",
    "        return self.label_encoder.transform(new_data_list)\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:55:55.932020Z",
     "iopub.status.busy": "2021-02-02T12:55:55.931250Z",
     "iopub.status.idle": "2021-02-02T12:55:56.023988Z",
     "shell.execute_reply": "2021-02-02T12:55:56.024519Z"
    },
    "papermill": {
     "duration": 0.188679,
     "end_time": "2021-02-02T12:55:56.024786",
     "exception": false,
     "start_time": "2021-02-02T12:55:55.836107",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "details = ['Airline','Source','Destination','Total_Stops','Additional_Info']\n",
    "\n",
    "label_enc_list = dict()\n",
    "\n",
    "\n",
    "for col in range(len(details)):\n",
    "    label_encoder = LabelEncoderExt()\n",
    "    label_encoder.fit(train_data[details[col]])\n",
    "    train_data[details[col]] = label_encoder.transform(train_data[details[col]])\n",
    "    label_enc_list[details[col]]=label_encoder\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:55:56.209550Z",
     "iopub.status.busy": "2021-02-02T12:55:56.208906Z",
     "iopub.status.idle": "2021-02-02T12:55:56.231828Z",
     "shell.execute_reply": "2021-02-02T12:55:56.231082Z"
    },
    "papermill": {
     "duration": 0.116082,
     "end_time": "2021-02-02T12:55:56.232000",
     "exception": false,
     "start_time": "2021-02-02T12:55:56.115918",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "for col in range(len(details)):\n",
    "    test_data[details[col]] = label_enc_list[details[col]].transform(test_data[details[col]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:55:56.428009Z",
     "iopub.status.busy": "2021-02-02T12:55:56.427269Z",
     "iopub.status.idle": "2021-02-02T12:55:56.438884Z",
     "shell.execute_reply": "2021-02-02T12:55:56.439495Z"
    },
    "papermill": {
     "duration": 0.117883,
     "end_time": "2021-02-02T12:55:56.439722",
     "exception": false,
     "start_time": "2021-02-02T12:55:56.321839",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Date_of_Journey</th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Dep_Time</th>\n",
       "      <th>Arrival_Time</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>09-04-2019</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>04:00</td>\n",
       "      <td>06:50</td>\n",
       "      <td>2h 50m</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>3943.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>03-06-2019</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>08:30</td>\n",
       "      <td>11:20</td>\n",
       "      <td>2h 50m</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>4823.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4</td>\n",
       "      <td>09-06-2019</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>19:35</td>\n",
       "      <td>21:05</td>\n",
       "      <td>1h 30m</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>3210.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5</td>\n",
       "      <td>27-05-2019</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>12:50</td>\n",
       "      <td>21:00</td>\n",
       "      <td>8h 10m</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>7005.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>06-06-2019</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>06:50</td>\n",
       "      <td>07-06-2021 07:40</td>\n",
       "      <td>24h 50m</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>13381.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8528</th>\n",
       "      <td>1</td>\n",
       "      <td>09-03-2019</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>22:00</td>\n",
       "      <td>10-03-2021 19:15</td>\n",
       "      <td>21h 15m</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>16373.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8529</th>\n",
       "      <td>9</td>\n",
       "      <td>27-05-2019</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>17:00</td>\n",
       "      <td>19:35</td>\n",
       "      <td>2h 35m</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>4878.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8530</th>\n",
       "      <td>9</td>\n",
       "      <td>24-03-2019</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>07:05</td>\n",
       "      <td>09:20</td>\n",
       "      <td>2h 15m</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>4842.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8531</th>\n",
       "      <td>1</td>\n",
       "      <td>09-03-2019</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>04:00</td>\n",
       "      <td>10-03-2021 07:40</td>\n",
       "      <td>27h 40m</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>10315.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8532</th>\n",
       "      <td>2</td>\n",
       "      <td>24-03-2019</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>22:25</td>\n",
       "      <td>25-03-2021 07:40</td>\n",
       "      <td>9h 15m</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>10091.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8386 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Airline Date_of_Journey  Source  Destination Dep_Time      Arrival_Time  \\\n",
       "0           3      09-04-2019       0            2    04:00             06:50   \n",
       "1           3      03-06-2019       0            2    08:30             11:20   \n",
       "2           4      09-06-2019       4            3    19:35             21:05   \n",
       "3           5      27-05-2019       2            1    12:50             21:00   \n",
       "4           1      06-06-2019       2            1    06:50  07-06-2021 07:40   \n",
       "...       ...             ...     ...          ...      ...               ...   \n",
       "8528        1      09-03-2019       2            1    22:00  10-03-2021 19:15   \n",
       "8529        9      27-05-2019       0            2    17:00             19:35   \n",
       "8530        9      24-03-2019       1            4    07:05             09:20   \n",
       "8531        1      09-03-2019       2            1    04:00  10-03-2021 07:40   \n",
       "8532        2      24-03-2019       3            0    22:25  25-03-2021 07:40   \n",
       "\n",
       "     Duration  Total_Stops  Additional_Info    Price  \n",
       "0      2h 50m            4                7   3943.0  \n",
       "1      2h 50m            4                7   4823.0  \n",
       "2      1h 30m            4                4   3210.0  \n",
       "3      8h 10m            0                7   7005.0  \n",
       "4     24h 50m            1                7  13381.0  \n",
       "...       ...          ...              ...      ...  \n",
       "8528  21h 15m            1                7  16373.0  \n",
       "8529   2h 35m            4                7   4878.0  \n",
       "8530   2h 15m            4                7   4842.0  \n",
       "8531  27h 40m            0                7  10315.0  \n",
       "8532   9h 15m            0                7  10091.0  \n",
       "\n",
       "[8386 rows x 10 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:55:56.626815Z",
     "iopub.status.busy": "2021-02-02T12:55:56.626055Z",
     "iopub.status.idle": "2021-02-02T12:55:56.645752Z",
     "shell.execute_reply": "2021-02-02T12:55:56.646253Z"
    },
    "papermill": {
     "duration": 0.115535,
     "end_time": "2021-02-02T12:55:56.646463",
     "exception": false,
     "start_time": "2021-02-02T12:55:56.530928",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Date_of_Journey</th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Dep_Time</th>\n",
       "      <th>Arrival_Time</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7</td>\n",
       "      <td>12-05-2019</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>15:05</td>\n",
       "      <td>20:20</td>\n",
       "      <td>5h 15m</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>15-03-2019</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>18:05</td>\n",
       "      <td>21:10</td>\n",
       "      <td>3h 5m</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4</td>\n",
       "      <td>24-06-2019</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>11:45</td>\n",
       "      <td>25-06-2021 04:25</td>\n",
       "      <td>16h 40m</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7</td>\n",
       "      <td>21-06-2019</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>09:00</td>\n",
       "      <td>11:25</td>\n",
       "      <td>2h 25m</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>27-04-2019</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>14:25</td>\n",
       "      <td>16:55</td>\n",
       "      <td>2h 30m</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2129</th>\n",
       "      <td>1</td>\n",
       "      <td>06-04-2019</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>17:00</td>\n",
       "      <td>19:45</td>\n",
       "      <td>2h 45m</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2130</th>\n",
       "      <td>4</td>\n",
       "      <td>01-04-2019</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>06:30</td>\n",
       "      <td>20:45</td>\n",
       "      <td>14h 15m</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2131</th>\n",
       "      <td>5</td>\n",
       "      <td>15-05-2019</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>08:45</td>\n",
       "      <td>19:00</td>\n",
       "      <td>10h 15m</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2132</th>\n",
       "      <td>1</td>\n",
       "      <td>03-03-2019</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>21:30</td>\n",
       "      <td>04-03-2021 19:15</td>\n",
       "      <td>21h 45m</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2133</th>\n",
       "      <td>4</td>\n",
       "      <td>15-05-2019</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>15:15</td>\n",
       "      <td>18:10</td>\n",
       "      <td>2h 55m</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2134 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Airline Date_of_Journey  Source  Destination Dep_Time      Arrival_Time  \\\n",
       "0           7      12-05-2019       3            0    15:05             20:20   \n",
       "1           1      15-03-2019       2            1    18:05             21:10   \n",
       "2           4      24-06-2019       2            1    11:45  25-06-2021 04:25   \n",
       "3           7      21-06-2019       3            0    09:00             11:25   \n",
       "4           3      27-04-2019       3            0    14:25             16:55   \n",
       "...       ...             ...     ...          ...      ...               ...   \n",
       "2129        1      06-04-2019       0            2    17:00             19:45   \n",
       "2130        4      01-04-2019       3            0    06:30             20:45   \n",
       "2131        5      15-05-2019       2            1    08:45             19:00   \n",
       "2132        1      03-03-2019       2            1    21:30  04-03-2021 19:15   \n",
       "2133        4      15-05-2019       0            2    15:15             18:10   \n",
       "\n",
       "     Duration  Total_Stops  Additional_Info  \n",
       "0      5h 15m            0                7  \n",
       "1       3h 5m            4                7  \n",
       "2     16h 40m            1                7  \n",
       "3      2h 25m            4                7  \n",
       "4      2h 30m            4                7  \n",
       "...       ...          ...              ...  \n",
       "2129   2h 45m            4                7  \n",
       "2130  14h 15m            0                7  \n",
       "2131  10h 15m            0                7  \n",
       "2132  21h 45m            1                7  \n",
       "2133   2h 55m            4                7  \n",
       "\n",
       "[2134 rows x 9 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.09227,
     "end_time": "2021-02-02T12:55:56.830205",
     "exception": false,
     "start_time": "2021-02-02T12:55:56.737935",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### DATE-TIME CONVERSION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:55:57.018722Z",
     "iopub.status.busy": "2021-02-02T12:55:57.017915Z",
     "iopub.status.idle": "2021-02-02T12:55:57.054931Z",
     "shell.execute_reply": "2021-02-02T12:55:57.055490Z"
    },
    "papermill": {
     "duration": 0.133298,
     "end_time": "2021-02-02T12:55:57.055735",
     "exception": false,
     "start_time": "2021-02-02T12:55:56.922437",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "time_cols = ['Dep_Time']\n",
    "time_dur = ['Duration']\n",
    "date_cols = ['Date_of_Journey']\n",
    "\n",
    "for col in date_cols:\n",
    "    train_data['{}_month'.format(col)] =  pd.to_datetime(train_data['{}'.format(col)],format='%d-%m-%Y').dt.month\n",
    "    train_data['{}_day'.format(col)] =  pd.to_datetime(train_data['{}'.format(col)],format='%d-%m-%Y').dt.day\n",
    "    train_data['{}_year'.format(col)] =  pd.to_datetime(train_data['{}'.format(col)],format='%d-%m-%Y').dt.year\n",
    "\n",
    "for col in time_cols:\n",
    "    train_data['{}_hour'.format(col)] =  pd.to_datetime(train_data['{}'.format(col)],format='%H:%M').dt.hour\n",
    "    train_data['{}_minutes'.format(col)] =  pd.to_datetime(train_data['{}'.format(col)],format='%H:%M').dt.minute\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:55:57.244355Z",
     "iopub.status.busy": "2021-02-02T12:55:57.243554Z",
     "iopub.status.idle": "2021-02-02T12:55:57.274249Z",
     "shell.execute_reply": "2021-02-02T12:55:57.273610Z"
    },
    "papermill": {
     "duration": 0.125348,
     "end_time": "2021-02-02T12:55:57.274428",
     "exception": false,
     "start_time": "2021-02-02T12:55:57.149080",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "x=train_data['Duration'].map(lambda x: x.replace('h',':').replace(' ','').replace('m',':'))\n",
    "def mapper(elems):\n",
    "    if elems[0] == '':\n",
    "        return int(elems[1])\n",
    "        \n",
    "    elif elems[1] == '':\n",
    "        return int(int(elems[0])*60)\n",
    "    else:\n",
    "        return int(int(elems[0])*60 + int(elems[1]))\n",
    "        \n",
    "y = x.map(lambda i : mapper(i.split(':')))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:55:57.464900Z",
     "iopub.status.busy": "2021-02-02T12:55:57.463931Z",
     "iopub.status.idle": "2021-02-02T12:55:57.467536Z",
     "shell.execute_reply": "2021-02-02T12:55:57.466878Z"
    },
    "papermill": {
     "duration": 0.101577,
     "end_time": "2021-02-02T12:55:57.467732",
     "exception": false,
     "start_time": "2021-02-02T12:55:57.366155",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_data['Duration_minutes'] = y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:55:57.670389Z",
     "iopub.status.busy": "2021-02-02T12:55:57.662530Z",
     "iopub.status.idle": "2021-02-02T12:55:57.678357Z",
     "shell.execute_reply": "2021-02-02T12:55:57.677741Z"
    },
    "papermill": {
     "duration": 0.118594,
     "end_time": "2021-02-02T12:55:57.678534",
     "exception": false,
     "start_time": "2021-02-02T12:55:57.559940",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_data = train_data.sort_values(by='Date_of_Journey').reset_index(drop=True)\n",
    "#train_data = train_data.drop(columns=['Date_of_Journey','Dep_Time','Arrival_Time','Duration'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:55:57.868382Z",
     "iopub.status.busy": "2021-02-02T12:55:57.867350Z",
     "iopub.status.idle": "2021-02-02T12:55:57.904221Z",
     "shell.execute_reply": "2021-02-02T12:55:57.904958Z"
    },
    "papermill": {
     "duration": 0.133481,
     "end_time": "2021-02-02T12:55:57.905214",
     "exception": false,
     "start_time": "2021-02-02T12:55:57.771733",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "for col in date_cols:\n",
    "    test_data['{}_month'.format(col)] =  pd.to_datetime(test_data['{}'.format(col)],format='%d-%m-%Y').dt.month\n",
    "    test_data['{}_day'.format(col)] =  pd.to_datetime(test_data['{}'.format(col)],format='%d-%m-%Y').dt.day\n",
    "    test_data['{}_year'.format(col)] =  pd.to_datetime(test_data['{}'.format(col)],format='%d-%m-%Y').dt.year\n",
    "\n",
    "for col in time_cols:\n",
    "    test_data['{}_hour'.format(col)] =  pd.to_datetime(test_data['{}'.format(col)],format='%H:%M').dt.hour\n",
    "    test_data['{}_minutes'.format(col)] =  pd.to_datetime(test_data['{}'.format(col)],format='%H:%M').dt.minute\n",
    "\n",
    "x=test_data['Duration'].map(lambda x: x.replace('h',':').replace(' ','').replace('m',':'))\n",
    "        \n",
    "y = x.map(lambda i : mapper(i.split(':')))\n",
    "\n",
    "test_data['Duration_minutes'] = y\n",
    "\n",
    "test_data = test_data.drop(columns=['Dep_Time','Arrival_Time','Duration'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:55:58.097984Z",
     "iopub.status.busy": "2021-02-02T12:55:58.096916Z",
     "iopub.status.idle": "2021-02-02T12:55:58.100834Z",
     "shell.execute_reply": "2021-02-02T12:55:58.101311Z"
    },
    "papermill": {
     "duration": 0.102292,
     "end_time": "2021-02-02T12:55:58.101542",
     "exception": false,
     "start_time": "2021-02-02T12:55:57.999250",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#train_data = train_data.drop(columns = ['Date_of_Journey_year'] )\n",
    "#test_data = test_data.drop(columns = ['Date_of_Journey_year'] )\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.093553,
     "end_time": "2021-02-02T12:55:58.290654",
     "exception": false,
     "start_time": "2021-02-02T12:55:58.197101",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### FILTERING OUT THE QUASI-CONSTANT FEATURE"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T10:40:22.476340Z",
     "iopub.status.busy": "2021-02-02T10:40:22.475425Z",
     "iopub.status.idle": "2021-02-02T10:40:22.478288Z",
     "shell.execute_reply": "2021-02-02T10:40:22.477777Z"
    },
    "papermill": {
     "duration": 0.095929,
     "end_time": "2021-02-02T12:55:58.478996",
     "exception": false,
     "start_time": "2021-02-02T12:55:58.383067",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "selection = VarianceThreshold(threshold=0.01) # of more that 99% values are same -- we remove the column\n",
    "\n",
    "cols = list(set(train_data.columns) - set(['Dep_Time','Date_of_Journey_year','Arrival_Time','Duration']))\n",
    "\n",
    "selection.fit(train_data[cols])\n",
    "\n",
    "print(\"No. of Features that are Quasi-Constant : \",(len(cols) - sum(selection.get_support())))\n",
    "\n",
    "quasi_ = list(selection.get_support())\n",
    "\n",
    "for i in range(len(quasi_)):\n",
    "    if quasi_[i] == False:\n",
    "        print(\"The Quasi-Constant Feature in train data is  :\",cols[i])\n",
    "        train_data=train_data.drop(columns=[cols[i]])\n",
    "for i in range(len(quasi_)):\n",
    "    if quasi_[i] == False:\n",
    "        print(\"The Quasi-Constant Feature in test data is  :\",cols[i])\n",
    "        test_dataset=test_dataset.drop(columns=[cols[i]])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.09458,
     "end_time": "2021-02-02T12:55:58.667936",
     "exception": false,
     "start_time": "2021-02-02T12:55:58.573356",
     "status": "completed"
    },
    "tags": []
   },
  },
   "source": [
    "### FEATURE ENGINEERING AND FEATURE GENERATION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:25.521578Z",
     "iopub.status.busy": "2021-02-02T12:57:25.520921Z",
     "iopub.status.idle": "2021-02-02T12:57:25.526578Z",
     "shell.execute_reply": "2021-02-02T12:57:25.527250Z"
    },
    "papermill": {
     "duration": 0.193652,
     "end_time": "2021-02-02T12:57:25.527428",
     "exception": false,
     "start_time": "2021-02-02T12:57:25.333776",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_data1 = train_data.copy()\n",
    "test_data1 = test_data.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:25.907711Z",
     "iopub.status.busy": "2021-02-02T12:57:25.906930Z",
     "iopub.status.idle": "2021-02-02T12:57:25.913052Z",
     "shell.execute_reply": "2021-02-02T12:57:25.912236Z"
    },
    "papermill": {
     "duration": 0.200547,
     "end_time": "2021-02-02T12:57:25.913254",
     "exception": false,
     "start_time": "2021-02-02T12:57:25.712707",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def mode(a):\n",
    "    u, c = np.unique(a, return_counts=True)\n",
    "    return u[c.argmax()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:26.305136Z",
     "iopub.status.busy": "2021-02-02T12:57:26.303961Z",
     "iopub.status.idle": "2021-02-02T12:57:26.347646Z",
     "shell.execute_reply": "2021-02-02T12:57:26.346878Z"
    },
    "papermill": {
     "duration": 0.24344,
     "end_time": "2021-02-02T12:57:26.347834",
     "exception": false,
     "start_time": "2021-02-02T12:57:26.104394",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "airline_mean = train_data.groupby('Airline').mean().round()\n",
    "src_mean = train_data.groupby('Source').mean().round()\n",
    "des_mean = train_data.groupby('Destination').mean().round()\n",
    "\n",
    "airline_mean_test = test_data.groupby('Airline').mean().round()\n",
    "src_mean_test = test_data.groupby('Source').mean().round()\n",
    "des_mean_test = test_data.groupby('Destination').mean().round()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:26.730203Z",
     "iopub.status.busy": "2021-02-02T12:57:26.729028Z",
     "iopub.status.idle": "2021-02-02T12:57:26.732258Z",
     "shell.execute_reply": "2021-02-02T12:57:26.732912Z"
    },
    "papermill": {
     "duration": 0.198891,
     "end_time": "2021-02-02T12:57:26.733130",
     "exception": false,
     "start_time": "2021-02-02T12:57:26.534239",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_data.columns = ['Airline', 'Date_of_Journey', 'Source', 'Destination', 'Dep_Time','Arrival_Time', 'Duration', 'Total_Stops', 'Additional_Info', 'Price','Date_of_Journey_month', 'Date_of_Journey_day', 'Date_of_Journey_year','Dep_Time_hour', 'Dep_Time_minutes', 'Duration_minutes']\n",
    "test_data.columns = ['Airline', 'Date_of_Journey', 'Source', 'Destination', 'Total_Stops','Additional_Info', 'Date_of_Journey_month', 'Date_of_Journey_day','Date_of_Journey_year', 'Dep_Time_hour', 'Dep_Time_minutes','Duration_minutes']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.195721,
     "end_time": "2021-02-02T12:57:27.118918",
     "exception": false,
     "start_time": "2021-02-02T12:57:26.923197",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### EXTRACTING MORE INFO FROM THE DEPARTURE DATE AND TIME"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:27.508079Z",
     "iopub.status.busy": "2021-02-02T12:57:27.506964Z",
     "iopub.status.idle": "2021-02-02T12:57:27.511361Z",
     "shell.execute_reply": "2021-02-02T12:57:27.511849Z"
    },
    "papermill": {
     "duration": 0.203186,
     "end_time": "2021-02-02T12:57:27.512071",
     "exception": false,
     "start_time": "2021-02-02T12:57:27.308885",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Airline', 'Date_of_Journey', 'Source', 'Destination', 'Dep_Time',\n",
       "       'Arrival_Time', 'Duration', 'Total_Stops', 'Additional_Info', 'Price',\n",
       "       'Date_of_Journey_month', 'Date_of_Journey_day', 'Date_of_Journey_year',\n",
       "       'Dep_Time_hour', 'Dep_Time_minutes', 'Duration_minutes'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:27.920868Z",
     "iopub.status.busy": "2021-02-02T12:57:27.919727Z",
     "iopub.status.idle": "2021-02-02T12:57:27.927381Z",
     "shell.execute_reply": "2021-02-02T12:57:27.927980Z"
    },
    "papermill": {
     "duration": 0.226192,
     "end_time": "2021-02-02T12:57:27.928211",
     "exception": false,
     "start_time": "2021-02-02T12:57:27.702019",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Chech the time of the day - Morning,Evening,etc\n",
    "def time_of_day(x):\n",
    "    if (x > 4) and (x <= 8):\n",
    "        #'Early Morning'\n",
    "        return 0\n",
    "    elif (x > 8) and (x <= 12 ):\n",
    "        # 'Morning'\n",
    "        return 1\n",
    "    elif (x > 12) and (x <= 16):\n",
    "        # Noon\n",
    "        return 2\n",
    "    elif (x > 16) and (x <= 20) :\n",
    "        #'Eve'\n",
    "        return 3\n",
    "    elif (x > 20) and (x <= 24):\n",
    "        # 'Night'\n",
    "        return 4\n",
    "    elif (x <= 4):\n",
    "        # 'Late Night'\n",
    "        return 5\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:28.353395Z",
     "iopub.status.busy": "2021-02-02T12:57:28.352288Z",
     "iopub.status.idle": "2021-02-02T12:57:28.358973Z",
     "shell.execute_reply": "2021-02-02T12:57:28.358329Z"
    },
    "papermill": {
     "duration": 0.20915,
     "end_time": "2021-02-02T12:57:28.359166",
     "exception": false,
     "start_time": "2021-02-02T12:57:28.150016",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def check_is_holiday(x):\n",
    "    if x not  in holiday_lis:\n",
    "        return 0\n",
    "    else: return 1\n",
    "    \n",
    "#train_data['Date_of_Journey'].apply(lambda x: check_is_holiday(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:28.767315Z",
     "iopub.status.busy": "2021-02-02T12:57:28.766197Z",
     "iopub.status.idle": "2021-02-02T12:57:28.768645Z",
     "shell.execute_reply": "2021-02-02T12:57:28.769261Z"
    },
    "papermill": {
     "duration": 0.208424,
     "end_time": "2021-02-02T12:57:28.769474",
     "exception": false,
     "start_time": "2021-02-02T12:57:28.561050",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def check_month_time(x):\n",
    "    if x in range(1,10):\n",
    "        return 0\n",
    "    elif x in range(10,20):\n",
    "        return 1 \n",
    "    else: \n",
    "        return 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:29.171511Z",
     "iopub.status.busy": "2021-02-02T12:57:29.170441Z",
     "iopub.status.idle": "2021-02-02T12:57:29.178268Z",
     "shell.execute_reply": "2021-02-02T12:57:29.177522Z"
    },
    "papermill": {
     "duration": 0.212824,
     "end_time": "2021-02-02T12:57:29.178467",
     "exception": false,
     "start_time": "2021-02-02T12:57:28.965643",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def is_month_end(x):\n",
    "    if x<5 or x>25:\n",
    "        return 1\n",
    "    else:\n",
    "        return 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:29.583921Z",
     "iopub.status.busy": "2021-02-02T12:57:29.583190Z",
     "iopub.status.idle": "2021-02-02T12:57:29.586822Z",
     "shell.execute_reply": "2021-02-02T12:57:29.586164Z"
    },
    "papermill": {
     "duration": 0.198082,
     "end_time": "2021-02-02T12:57:29.586971",
     "exception": false,
     "start_time": "2021-02-02T12:57:29.388889",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "holiday_lis = []\n",
    "holiday_season = {}\n",
    "holiday_season_lis = []\n",
    "\n",
    "for date in holidays.UnitedStates(years = train_data['Date_of_Journey_year'].unique()).items():\n",
    "    holiday_lis.append(str(date[0]))\n",
    "    holiday_season['Start'] = date[0]-datetime.timedelta(days=7)\n",
    "    holiday_season['End'] = date[0]+datetime.timedelta(days=7)\n",
    "    holiday_season_lis.append(holiday_season)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:29.979386Z",
     "iopub.status.busy": "2021-02-02T12:57:29.978337Z",
     "iopub.status.idle": "2021-02-02T12:57:29.986583Z",
     "shell.execute_reply": "2021-02-02T12:57:29.987231Z"
    },
    "papermill": {
     "duration": 0.206451,
     "end_time": "2021-02-02T12:57:29.987472",
     "exception": false,
     "start_time": "2021-02-02T12:57:29.781021",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "holiday_lis =  list(holidays.India(years= [2018,2019,2020]))\n",
    "holiday_lis.extend(list(holidays.UnitedStates(years= [2018,2019,2020])))\n",
    "holiday_lis.extend(list(holidays.England(years= [2018,2019,2020])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:30.410265Z",
     "iopub.status.busy": "2021-02-02T12:57:30.407801Z",
     "iopub.status.idle": "2021-02-02T12:57:30.474037Z",
     "shell.execute_reply": "2021-02-02T12:57:30.473423Z"
    },
    "papermill": {
     "duration": 0.267228,
     "end_time": "2021-02-02T12:57:30.474216",
     "exception": false,
     "start_time": "2021-02-02T12:57:30.206988",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_data['IsWeekEnd'] = np.where((pd.to_datetime(train_data['Date_of_Journey'],format='%d-%m-%Y').dt.dayofweek) < 5,0,1) \n",
    "train_data['TimeOfDay'] = train_data['Dep_Time_hour'].apply(time_of_day)\n",
    "train_data['TimeOfMonth'] = train_data['Date_of_Journey_day'].apply(lambda x: check_month_time(x))\n",
    "train_data['WeekDay'] = pd.to_datetime(train_data['Date_of_Journey'],format='%d-%m-%Y').dt.dayofweek\n",
    "\n",
    "test_data['IsWeekEnd'] = np.where((pd.to_datetime(test_data['Date_of_Journey'],format='%d-%m-%Y').dt.dayofweek) < 5,0,1) \n",
    "test_data['TimeOfDay'] = test_data['Dep_Time_hour'].apply(time_of_day)\n",
    "test_data['TimeOfMonth'] = test_data['Date_of_Journey_day'].apply(lambda x: check_month_time(x))\n",
    "test_data['WeekDay'] = pd.to_datetime(train_data['Date_of_Journey'],format='%d-%m-%Y').dt.dayofweek\n",
    "\n",
    "train_data['IsMonthEnd'] = train_data['Date_of_Journey_day'].apply(lambda x: is_month_end(x))\n",
    "test_data['IsMonthEnd'] = test_data['Date_of_Journey_day'].apply(lambda x: is_month_end(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:30.863790Z",
     "iopub.status.busy": "2021-02-02T12:57:30.862671Z",
     "iopub.status.idle": "2021-02-02T12:57:30.867204Z",
     "shell.execute_reply": "2021-02-02T12:57:30.866627Z"
    },
    "papermill": {
     "duration": 0.202821,
     "end_time": "2021-02-02T12:57:30.867383",
     "exception": false,
     "start_time": "2021-02-02T12:57:30.664562",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Arrival_Time', 'Dep_Time', 'Duration', 'Price'}"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set(train_data.columns) - set(test_data.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:31.263067Z",
     "iopub.status.busy": "2021-02-02T12:57:31.262346Z",
     "iopub.status.idle": "2021-02-02T12:57:31.268022Z",
     "shell.execute_reply": "2021-02-02T12:57:31.268515Z"
    },
    "papermill": {
     "duration": 0.208647,
     "end_time": "2021-02-02T12:57:31.268834",
     "exception": false,
     "start_time": "2021-02-02T12:57:31.060187",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_data = train_data.drop(columns = {'Arrival_Time', 'Dep_Time', 'Duration'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:31.661665Z",
     "iopub.status.busy": "2021-02-02T12:57:31.660500Z",
     "iopub.status.idle": "2021-02-02T12:57:31.665657Z",
     "shell.execute_reply": "2021-02-02T12:57:31.664960Z"
    },
    "papermill": {
     "duration": 0.203113,
     "end_time": "2021-02-02T12:57:31.665829",
     "exception": false,
     "start_time": "2021-02-02T12:57:31.462716",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_data = train_data.drop(columns = {'Date_of_Journey'})\n",
    "test_data = test_data.drop(columns = {'Date_of_Journey'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:32.066162Z",
     "iopub.status.busy": "2021-02-02T12:57:32.065406Z",
     "iopub.status.idle": "2021-02-02T12:57:32.068451Z",
     "shell.execute_reply": "2021-02-02T12:57:32.067854Z"
    },
    "papermill": {
     "duration": 0.203426,
     "end_time": "2021-02-02T12:57:32.068634",
     "exception": false,
     "start_time": "2021-02-02T12:57:31.865208",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_data = train_data.drop(columns = {'Date_of_Journey_year'})\n",
    "test_data = test_data.drop(columns = {'Date_of_Journey_year'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:32.451726Z",
     "iopub.status.busy": "2021-02-02T12:57:32.451011Z",
     "iopub.status.idle": "2021-02-02T12:57:32.458315Z",
     "shell.execute_reply": "2021-02-02T12:57:32.457580Z"
    },
    "papermill": {
     "duration": 0.200661,
     "end_time": "2021-02-02T12:57:32.458519",
     "exception": false,
     "start_time": "2021-02-02T12:57:32.257858",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "x_data = train_data[set(train_data.columns)-set(['Price'])] \n",
    "y_data = pd.DataFrame(train_data['Price'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:32.862293Z",
     "iopub.status.busy": "2021-02-02T12:57:32.860170Z",
     "iopub.status.idle": "2021-02-02T12:57:32.869303Z",
     "shell.execute_reply": "2021-02-02T12:57:32.868556Z"
    },
    "papermill": {
     "duration": 0.222063,
     "end_time": "2021-02-02T12:57:32.869506",
     "exception": false,
     "start_time": "2021-02-02T12:57:32.647443",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Airline</th>\n",
       "      <th>Date_of_Journey_month</th>\n",
       "      <th>Dep_Time_hour</th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>TimeOfDay</th>\n",
       "      <th>Date_of_Journey_day</th>\n",
       "      <th>IsWeekEnd</th>\n",
       "      <th>Additional_Info</th>\n",
       "      <th>WeekDay</th>\n",
       "      <th>Duration_minutes</th>\n",
       "      <th>Dep_Time_minutes</th>\n",
       "      <th>IsMonthEnd</th>\n",
       "      <th>TimeOfMonth</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>90</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>1200</td>\n",
       "      <td>40</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>285</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>170</td>\n",
       "      <td>55</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>140</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8381</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>16</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>1595</td>\n",
       "      <td>40</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8382</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>625</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8383</th>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>23</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>1760</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8384</th>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>170</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8385</th>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>660</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8386 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Total_Stops  Airline  Date_of_Journey_month  Dep_Time_hour  Source  \\\n",
       "0               4        3                      3              2       4   \n",
       "1               0        4                      3             11       0   \n",
       "2               0        3                      3              5       0   \n",
       "3               4        3                      3             16       0   \n",
       "4               4        3                      3              5       1   \n",
       "...           ...      ...                    ...            ...     ...   \n",
       "8381            1        1                      6             16       2   \n",
       "8382            0        3                      6             10       2   \n",
       "8383            1        4                      6             23       2   \n",
       "8384            4        3                      6              4       0   \n",
       "8385            0        4                      6              8       2   \n",
       "\n",
       "      Destination  TimeOfDay  Date_of_Journey_day  IsWeekEnd  Additional_Info  \\\n",
       "0               3          5                    1          0                7   \n",
       "1               5          1                    1          0                7   \n",
       "2               5          0                    1          0                5   \n",
       "3               5          2                    1          0                7   \n",
       "4               4          0                    1          0                7   \n",
       "...           ...        ...                  ...        ...              ...   \n",
       "8381            1          2                   27          0                7   \n",
       "8382            1          1                   27          0                7   \n",
       "8383            1          4                   27          0                7   \n",
       "8384            2          5                   27          0                7   \n",
       "8385            1          0                   27          0                4   \n",
       "\n",
       "      WeekDay  Duration_minutes  Dep_Time_minutes  IsMonthEnd  TimeOfMonth  \n",
       "0           4                90                30           1            0  \n",
       "1           4              1200                40           1            0  \n",
       "2           4               285                15           1            0  \n",
       "3           4               170                55           1            0  \n",
       "4           4               140                15           1            0  \n",
       "...       ...               ...               ...         ...          ...  \n",
       "8381        3              1595                40           1            2  \n",
       "8382        3               625                35           1            2  \n",
       "8383        3              1760                 5           1            2  \n",
       "8384        3               170                 0           1            2  \n",
       "8385        3               660                 0           1            2  \n",
       "\n",
       "[8386 rows x 15 columns]"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:33.266987Z",
     "iopub.status.busy": "2021-02-02T12:57:33.266239Z",
     "iopub.status.idle": "2021-02-02T12:57:33.271374Z",
     "shell.execute_reply": "2021-02-02T12:57:33.270783Z"
    },
    "papermill": {
     "duration": 0.210772,
     "end_time": "2021-02-02T12:57:33.271559",
     "exception": false,
     "start_time": "2021-02-02T12:57:33.060787",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>16000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>22270.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8064.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>12649.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7295.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8381</th>\n",
       "      <td>9653.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8382</th>\n",
       "      <td>5894.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8383</th>\n",
       "      <td>15339.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8384</th>\n",
       "      <td>3943.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8385</th>\n",
       "      <td>10262.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8386 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Price\n",
       "0     16000.0\n",
       "1     22270.0\n",
       "2      8064.0\n",
       "3     12649.0\n",
       "4      7295.0\n",
       "...       ...\n",
       "8381   9653.0\n",
       "8382   5894.0\n",
       "8383  15339.0\n",
       "8384   3943.0\n",
       "8385  10262.0\n",
       "\n",
       "[8386 rows x 1 columns]"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.192639,
     "end_time": "2021-02-02T12:57:33.657112",
     "exception": false,
     "start_time": "2021-02-02T12:57:33.464473",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### ONE-HOT ENCODING THE CATEGORICAL FEATURES"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:34.053142Z",
     "iopub.status.busy": "2021-02-02T12:57:34.052467Z",
     "iopub.status.idle": "2021-02-02T12:57:34.056299Z",
     "shell.execute_reply": "2021-02-02T12:57:34.055647Z"
    },
    "papermill": {
     "duration": 0.205812,
     "end_time": "2021-02-02T12:57:34.056471",
     "exception": false,
     "start_time": "2021-02-02T12:57:33.850659",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "categorical_features = set(x_data.columns)\n",
    "numerical_features = ['Duration_minutes']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:34.448992Z",
     "iopub.status.busy": "2021-02-02T12:57:34.448245Z",
     "iopub.status.idle": "2021-02-02T12:57:34.491775Z",
     "shell.execute_reply": "2021-02-02T12:57:34.491076Z"
    },
    "papermill": {
     "duration": 0.245131,
     "end_time": "2021-02-02T12:57:34.491923",
     "exception": false,
     "start_time": "2021-02-02T12:57:34.246792",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "x_data_c = pd.get_dummies(x_data[categorical_features],columns =categorical_features )\n",
    "x_test_c = pd.get_dummies(test_data[categorical_features],columns =categorical_features )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:34.870789Z",
     "iopub.status.busy": "2021-02-02T12:57:34.870104Z",
     "iopub.status.idle": "2021-02-02T12:57:34.875672Z",
     "shell.execute_reply": "2021-02-02T12:57:34.876308Z"
    },
    "papermill": {
     "duration": 0.19784,
     "end_time": "2021-02-02T12:57:34.876482",
     "exception": false,
     "start_time": "2021-02-02T12:57:34.678642",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((8386, 466), (2134, 396))"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_data_c.shape,x_test_c.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:35.291503Z",
     "iopub.status.busy": "2021-02-02T12:57:35.290560Z",
     "iopub.status.idle": "2021-02-02T12:57:35.300786Z",
     "shell.execute_reply": "2021-02-02T12:57:35.300100Z"
    },
    "papermill": {
     "duration": 0.235821,
     "end_time": "2021-02-02T12:57:35.300962",
     "exception": false,
     "start_time": "2021-02-02T12:57:35.065141",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Duration_minutes_1845',\n",
       " 'Duration_minutes_2185',\n",
       " 'Duration_minutes_1205',\n",
       " 'Duration_minutes_670',\n",
       " 'Duration_minutes_1160',\n",
       " 'Duration_minutes_1030',\n",
       " 'Duration_minutes_410',\n",
       " 'Duration_minutes_1135',\n",
       " 'Duration_minutes_2420',\n",
       " 'Duration_minutes_1650',\n",
       " 'Duration_minutes_1780',\n",
       " 'Duration_minutes_1505',\n",
       " 'Duration_minutes_815',\n",
       " 'Duration_minutes_1890',\n",
       " 'Duration_minutes_680',\n",
       " 'Duration_minutes_1710',\n",
       " 'Duration_minutes_1235',\n",
       " 'Duration_minutes_1670',\n",
       " 'Duration_minutes_905',\n",
       " 'Duration_minutes_1750',\n",
       " 'Duration_minutes_1565',\n",
       " 'Duration_minutes_2105',\n",
       " 'Duration_minutes_220',\n",
       " 'Duration_minutes_2000',\n",
       " 'Duration_minutes_1660',\n",
       " 'Duration_minutes_2135',\n",
       " 'Duration_minutes_2040',\n",
       " 'Duration_minutes_405',\n",
       " 'Duration_minutes_2120',\n",
       " 'Duration_minutes_235',\n",
       " 'Duration_minutes_285',\n",
       " 'Duration_minutes_1060',\n",
       " 'WeekDay_3',\n",
       " 'Duration_minutes_1510',\n",
       " 'Duration_minutes_1035',\n",
       " 'Duration_minutes_1940',\n",
       " 'Duration_minutes_1770',\n",
       " 'WeekDay_1',\n",
       " 'Duration_minutes_1735',\n",
       " 'Duration_minutes_2025',\n",
       " 'Duration_minutes_2860',\n",
       " 'Duration_minutes_1250',\n",
       " 'Duration_minutes_1900',\n",
       " 'Duration_minutes_595',\n",
       " 'Duration_minutes_205',\n",
       " 'Duration_minutes_2115',\n",
       " 'Duration_minutes_2065',\n",
       " 'Duration_minutes_2480',\n",
       " 'Duration_minutes_1240',\n",
       " 'Duration_minutes_1810',\n",
       " 'Duration_minutes_1385',\n",
       " 'Duration_minutes_2820',\n",
       " 'Duration_minutes_1190',\n",
       " 'Duration_minutes_2525',\n",
       " 'Duration_minutes_1260',\n",
       " 'Duration_minutes_1925',\n",
       " 'Duration_minutes_430',\n",
       " 'Duration_minutes_1975',\n",
       " 'Duration_minutes_1815',\n",
       " 'Duration_minutes_1825',\n",
       " 'Duration_minutes_2300',\n",
       " 'Duration_minutes_1720',\n",
       " 'Duration_minutes_935',\n",
       " 'Duration_minutes_2565',\n",
       " 'Duration_minutes_2045',\n",
       " 'Additional_Info_8',\n",
       " 'Duration_minutes_2315',\n",
       " 'Duration_minutes_1690',\n",
       " 'Duration_minutes_250',\n",
       " 'Duration_minutes_1915',\n",
       " 'Additional_Info_1',\n",
       " 'Duration_minutes_2170',\n",
       " 'Additional_Info_2',\n",
       " 'Duration_minutes_1645',\n",
       " 'Duration_minutes_820']"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test_missing = list(set(x_data_c.columns) - set(x_test_c.columns))\n",
    "x_test_missing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:35.689643Z",
     "iopub.status.busy": "2021-02-02T12:57:35.688884Z",
     "iopub.status.idle": "2021-02-02T12:57:35.692884Z",
     "shell.execute_reply": "2021-02-02T12:57:35.692338Z"
    },
    "papermill": {
     "duration": 0.202199,
     "end_time": "2021-02-02T12:57:35.693052",
     "exception": false,
     "start_time": "2021-02-02T12:57:35.490853",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Duration_minutes_1910',\n",
       " 'Additional_Info_9',\n",
       " 'Duration_minutes_1675',\n",
       " 'Duration_minutes_2230',\n",
       " 'Duration_minutes_2345']"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train_missing = list(set(x_test_c.columns) - set(x_data_c.columns) )\n",
    "x_train_missing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:36.083373Z",
     "iopub.status.busy": "2021-02-02T12:57:36.082697Z",
     "iopub.status.idle": "2021-02-02T12:57:36.119028Z",
     "shell.execute_reply": "2021-02-02T12:57:36.119520Z"
    },
    "papermill": {
     "duration": 0.235197,
     "end_time": "2021-02-02T12:57:36.119773",
     "exception": false,
     "start_time": "2021-02-02T12:57:35.884576",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "for col in x_test_missing:\n",
    "    x_test_c[col] =  0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:36.503369Z",
     "iopub.status.busy": "2021-02-02T12:57:36.502621Z",
     "iopub.status.idle": "2021-02-02T12:57:36.511696Z",
     "shell.execute_reply": "2021-02-02T12:57:36.512204Z"
    },
    "papermill": {
     "duration": 0.203086,
     "end_time": "2021-02-02T12:57:36.512431",
     "exception": false,
     "start_time": "2021-02-02T12:57:36.309345",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "x_test_c= x_test_c.drop(columns = x_train_missing)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:36.902991Z",
     "iopub.status.busy": "2021-02-02T12:57:36.902257Z",
     "iopub.status.idle": "2021-02-02T12:57:36.908448Z",
     "shell.execute_reply": "2021-02-02T12:57:36.907721Z"
    },
    "papermill": {
     "duration": 0.204189,
     "end_time": "2021-02-02T12:57:36.908643",
     "exception": false,
     "start_time": "2021-02-02T12:57:36.704454",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((8386, 466), (2134, 466))"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_data_c.shape,x_test_c.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.190422,
     "end_time": "2021-02-02T12:57:37.289404",
     "exception": false,
     "start_time": "2021-02-02T12:57:37.098982",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### TEST - TRAIN - EVALUATION DATA SPLIT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:37.679701Z",
     "iopub.status.busy": "2021-02-02T12:57:37.678980Z",
     "iopub.status.idle": "2021-02-02T12:57:37.698323Z",
     "shell.execute_reply": "2021-02-02T12:57:37.697696Z"
    },
    "papermill": {
     "duration": 0.218313,
     "end_time": "2021-02-02T12:57:37.698579",
     "exception": false,
     "start_time": "2021-02-02T12:57:37.480266",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((6708, 466), (1678, 466))"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train_c,x_eval_c = train_test_split(x_data_c,test_size=0.2,shuffle=False)\n",
    "x_train_c.shape,x_eval_c.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:38.089298Z",
     "iopub.status.busy": "2021-02-02T12:57:38.088558Z",
     "iopub.status.idle": "2021-02-02T12:57:38.094163Z",
     "shell.execute_reply": "2021-02-02T12:57:38.093418Z"
    },
    "papermill": {
     "duration": 0.203015,
     "end_time": "2021-02-02T12:57:38.094336",
     "exception": false,
     "start_time": "2021-02-02T12:57:37.891321",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "x_train,x_eval,y_train,y_eval = train_test_split(x_data,y_data,test_size=0.2,shuffle=False)\n",
    "x_test = test_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:38.491817Z",
     "iopub.status.busy": "2021-02-02T12:57:38.491055Z",
     "iopub.status.idle": "2021-02-02T12:57:38.495177Z",
     "shell.execute_reply": "2021-02-02T12:57:38.494501Z"
    },
    "papermill": {
     "duration": 0.202439,
     "end_time": "2021-02-02T12:57:38.495339",
     "exception": false,
     "start_time": "2021-02-02T12:57:38.292900",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((6708, 466), (6708, 1), (1678, 466), (1678, 1), (2134, 466))"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train_c.shape,y_train.shape,x_eval_c.shape,y_eval.shape,x_test_c.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.194423,
     "end_time": "2021-02-02T12:57:38.881664",
     "exception": false,
     "start_time": "2021-02-02T12:57:38.687241",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### LOG TRANSFORMATION OF 'PRICE' COLUMN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:39.283174Z",
     "iopub.status.busy": "2021-02-02T12:57:39.282166Z",
     "iopub.status.idle": "2021-02-02T12:57:39.287796Z",
     "shell.execute_reply": "2021-02-02T12:57:39.287077Z"
    },
    "papermill": {
     "duration": 0.21114,
     "end_time": "2021-02-02T12:57:39.287973",
     "exception": false,
     "start_time": "2021-02-02T12:57:39.076833",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_train['Price'] = np.log(y_train['Price'])\n",
    "y_eval['Price'] = np.log(y_eval['Price'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.192906,
     "end_time": "2021-02-02T12:57:39.672849",
     "exception": false,
     "start_time": "2021-02-02T12:57:39.479943",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### SCALING THE NUMERICAL FEATURES"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:40.069689Z",
     "iopub.status.busy": "2021-02-02T12:57:40.068849Z",
     "iopub.status.idle": "2021-02-02T12:57:40.072870Z",
     "shell.execute_reply": "2021-02-02T12:57:40.072111Z"
    },
    "papermill": {
     "duration": 0.206817,
     "end_time": "2021-02-02T12:57:40.073071",
     "exception": false,
     "start_time": "2021-02-02T12:57:39.866254",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "x_train_n = x_train[numerical_features]\n",
    "x_test_n = x_test[numerical_features]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:40.515560Z",
     "iopub.status.busy": "2021-02-02T12:57:40.514459Z",
     "iopub.status.idle": "2021-02-02T12:57:40.520172Z",
     "shell.execute_reply": "2021-02-02T12:57:40.519564Z"
    },
    "papermill": {
     "duration": 0.208324,
     "end_time": "2021-02-02T12:57:40.520412",
     "exception": false,
     "start_time": "2021-02-02T12:57:40.312088",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Duration_minutes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>315</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>185</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>145</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2129</th>\n",
       "      <td>165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2130</th>\n",
       "      <td>855</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2131</th>\n",
       "      <td>615</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2132</th>\n",
       "      <td>1305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2133</th>\n",
       "      <td>175</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2134 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Duration_minutes\n",
       "0                  315\n",
       "1                  185\n",
       "2                 1000\n",
       "3                  145\n",
       "4                  150\n",
       "...                ...\n",
       "2129               165\n",
       "2130               855\n",
       "2131               615\n",
       "2132              1305\n",
       "2133               175\n",
       "\n",
       "[2134 rows x 1 columns]"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test_n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:40.908701Z",
     "iopub.status.busy": "2021-02-02T12:57:40.907928Z",
     "iopub.status.idle": "2021-02-02T12:57:40.911774Z",
     "shell.execute_reply": "2021-02-02T12:57:40.911105Z"
    },
    "papermill": {
     "duration": 0.19991,
     "end_time": "2021-02-02T12:57:40.911924",
     "exception": false,
     "start_time": "2021-02-02T12:57:40.712014",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "numerical_features = x_train_n.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:41.326919Z",
     "iopub.status.busy": "2021-02-02T12:57:41.320901Z",
     "iopub.status.idle": "2021-02-02T12:57:41.330430Z",
     "shell.execute_reply": "2021-02-02T12:57:41.329904Z"
    },
    "papermill": {
     "duration": 0.22795,
     "end_time": "2021-02-02T12:57:41.330584",
     "exception": false,
     "start_time": "2021-02-02T12:57:41.102634",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "x_s = MinMaxScaler()\n",
    "y_s = MinMaxScaler()\n",
    "\n",
    "\n",
    "x_train_n = pd.DataFrame(x_s.fit_transform(x_train_n),columns =numerical_features)\n",
    "x_test_n = pd.DataFrame(x_s.fit_transform(x_test_n),columns =numerical_features)\n",
    "x_eval_n = pd.DataFrame(x_s.fit_transform(x_eval[numerical_features]),columns =numerical_features)\n",
    "\n",
    "\n",
    "y_train = pd.DataFrame(y_s.fit_transform(y_train),columns =['Price'])\n",
    "y_eval = pd.DataFrame(y_s.fit_transform(y_eval),columns =['Price'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:41.715547Z",
     "iopub.status.busy": "2021-02-02T12:57:41.714731Z",
     "iopub.status.idle": "2021-02-02T12:57:41.719624Z",
     "shell.execute_reply": "2021-02-02T12:57:41.718989Z"
    },
    "papermill": {
     "duration": 0.199396,
     "end_time": "2021-02-02T12:57:41.719767",
     "exception": false,
     "start_time": "2021-02-02T12:57:41.520371",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6708, 1)"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train_n.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:42.108461Z",
     "iopub.status.busy": "2021-02-02T12:57:42.107612Z",
     "iopub.status.idle": "2021-02-02T12:57:42.111916Z",
     "shell.execute_reply": "2021-02-02T12:57:42.112387Z"
    },
    "papermill": {
     "duration": 0.200573,
     "end_time": "2021-02-02T12:57:42.112570",
     "exception": false,
     "start_time": "2021-02-02T12:57:41.911997",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((6708, 1), (2134, 1), (1678, 1), (6708, 1), (1678, 1))"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train_n.shape,x_test_n.shape,x_eval_n.shape,y_train.shape,y_eval.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.195076,
     "end_time": "2021-02-02T12:57:42.503921",
     "exception": false,
     "start_time": "2021-02-02T12:57:42.308845",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Merging the Categorical and Numerical Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:42.906585Z",
     "iopub.status.busy": "2021-02-02T12:57:42.905210Z",
     "iopub.status.idle": "2021-02-02T12:57:42.913628Z",
     "shell.execute_reply": "2021-02-02T12:57:42.914188Z"
    },
    "papermill": {
     "duration": 0.212435,
     "end_time": "2021-02-02T12:57:42.914405",
     "exception": false,
     "start_time": "2021-02-02T12:57:42.701970",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6708, 467)"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train = x_train_n.merge(x_train_c,left_index=True,right_index=True).reset_index(drop=True)\n",
    "x_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:43.309506Z",
     "iopub.status.busy": "2021-02-02T12:57:43.308496Z",
     "iopub.status.idle": "2021-02-02T12:57:43.318399Z",
     "shell.execute_reply": "2021-02-02T12:57:43.319050Z"
    },
    "papermill": {
     "duration": 0.207982,
     "end_time": "2021-02-02T12:57:43.319259",
     "exception": false,
     "start_time": "2021-02-02T12:57:43.111277",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1678, 467)"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_eval = x_eval_n.merge(x_eval_c.reset_index(drop=True),left_index=True,right_index=True).reset_index(drop=True)\n",
    "x_eval.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:43.713002Z",
     "iopub.status.busy": "2021-02-02T12:57:43.711946Z",
     "iopub.status.idle": "2021-02-02T12:57:43.723323Z",
     "shell.execute_reply": "2021-02-02T12:57:43.722788Z"
    },
    "papermill": {
     "duration": 0.209304,
     "end_time": "2021-02-02T12:57:43.723503",
     "exception": false,
     "start_time": "2021-02-02T12:57:43.514199",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2134, 467)"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test =x_test_n.merge(x_test_c,left_index=True,right_index=True).reset_index(drop=True)\n",
    "x_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:44.120456Z",
     "iopub.status.busy": "2021-02-02T12:57:44.119443Z",
     "iopub.status.idle": "2021-02-02T12:57:44.139323Z",
     "shell.execute_reply": "2021-02-02T12:57:44.139880Z"
    },
    "papermill": {
     "duration": 0.218892,
     "end_time": "2021-02-02T12:57:44.140092",
     "exception": false,
     "start_time": "2021-02-02T12:57:43.921200",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "x_train = x_train.drop(columns=['Duration_minutes'])\n",
    "x_test = x_test.drop(columns=['Duration_minutes'])\n",
    "x_eval = x_eval.drop(columns=['Duration_minutes'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.193106,
     "end_time": "2021-02-02T12:57:44.526074",
     "exception": false,
     "start_time": "2021-02-02T12:57:44.332968",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### MODEL TRAINING , PREDICTION AND EVALUATION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:44.919485Z",
     "iopub.status.busy": "2021-02-02T12:57:44.918267Z",
     "iopub.status.idle": "2021-02-02T12:57:44.925227Z",
     "shell.execute_reply": "2021-02-02T12:57:44.925913Z"
    },
    "papermill": {
     "duration": 0.207525,
     "end_time": "2021-02-02T12:57:44.926144",
     "exception": false,
     "start_time": "2021-02-02T12:57:44.718619",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def evaluate_metrics(x,y_true,y_pred,mod):\n",
    "    mean_abs_error = mean_absolute_error(y_true,y_pred)\n",
    "    mean_sq_error = mean_squared_error(y_true,y_pred)\n",
    "    root_mean_sq_error = mean_squared_error(y_true,y_pred)**0.5\n",
    "    r2_scr = r2_score(y_true,y_pred)\n",
    "    median_abs_score = median_absolute_error(y_true,y_pred)\n",
    "    explained_variance = explained_variance_score(y_true,y_pred)\n",
    "    return mean_abs_error,mean_sq_error,root_mean_sq_error,r2_scr,median_abs_score,explained_variance  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:45.355393Z",
     "iopub.status.busy": "2021-02-02T12:57:45.350433Z",
     "iopub.status.idle": "2021-02-02T12:57:45.357749Z",
     "shell.execute_reply": "2021-02-02T12:57:45.358238Z"
    },
    "papermill": {
     "duration": 0.236998,
     "end_time": "2021-02-02T12:57:45.358466",
     "exception": false,
     "start_time": "2021-02-02T12:57:45.121468",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def plot_regression_line(x,y_t,y_p):\n",
    "    plt.scatter(x,y_t,color='red',label = 'Y TRUE')\n",
    "    plt.scatter(x,y_p,color='yellow',linewidth = 0.5,label = 'Y PREDICTED')\n",
    "    #plt.xlim(-0.00000000000001,0.000000000000001)\n",
    "    plt.xlabel('ENTRY NO.')\n",
    "    plt.ylabel('PRICE')\n",
    "    plt.legend()\n",
    "    plt.title('ENTRY NO. V/S {} Regression Line\\n'.format('delay'))\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:45.743556Z",
     "iopub.status.busy": "2021-02-02T12:57:45.742895Z",
     "iopub.status.idle": "2021-02-02T12:57:46.049434Z",
     "shell.execute_reply": "2021-02-02T12:57:46.048879Z"
    },
    "papermill": {
     "duration": 0.5004,
     "end_time": "2021-02-02T12:57:46.049615",
     "exception": false,
     "start_time": "2021-02-02T12:57:45.549215",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/utils/validation.py:72: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  return f(**kwargs)\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/feature_selection/_univariate_selection.py:302: RuntimeWarning: invalid value encountered in true_divide\n",
      "  corr /= X_norms\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " IsWeekEnd_0      15.638860628103561\n",
      "\n",
      " IsWeekEnd_1      15.63886062810405\n",
      "\n",
      " Additional_Info_0      49.343542988030876\n",
      "\n",
      " Additional_Info_1      5.387171222493433\n",
      "\n",
      " Additional_Info_2      5.298364154745457\n",
      "\n",
      " Additional_Info_3      9.464859562808847\n",
      "\n",
      " Additional_Info_4      59.59488844796331\n",
      "\n",
      " Additional_Info_5      2.0502465605591552e-05\n",
      "\n",
      " Additional_Info_6      544.4197145070143\n",
      "\n",
      " Additional_Info_7      0.3801618073437859\n",
      "\n",
      " Additional_Info_8      0.32811322068731535\n",
      "\n",
      " WeekDay_0      51.04939841585042\n",
      "\n",
      " WeekDay_1      1.8894686271285106\n",
      "\n",
      " WeekDay_2      24.62284325402979\n",
      "\n",
      " WeekDay_3      0.04919826269651595\n",
      "\n",
      " WeekDay_4      16.682405939287367\n",
      "\n",
      " WeekDay_5      0.20719598167618622\n",
      "\n",
      " WeekDay_6      23.492623248572304\n",
      "\n",
      " Duration_minutes_75      54.518434633120144\n",
      "\n",
      " Duration_minutes_80      105.67721246418962\n",
      "\n",
      " Duration_minutes_85      104.56437115440376\n",
      "\n",
      " Duration_minutes_90      944.0930820738806\n",
      "\n",
      " Duration_minutes_95      66.90851795771798\n",
      "\n",
      " Duration_minutes_135      111.54956242525012\n",
      "\n",
      " Duration_minutes_140      198.29548825385442\n",
      "\n",
      " Duration_minutes_145      96.78557959541902\n",
      "\n",
      " Duration_minutes_150      170.03650134330792\n",
      "\n",
      " Duration_minutes_155      266.60432193694214\n",
      "\n",
      " Duration_minutes_160      76.30858700543297\n",
      "\n",
      " Duration_minutes_165      134.50174053311042\n",
      "\n",
      " Duration_minutes_170      360.70227983949263\n",
      "\n",
      " Duration_minutes_175      132.2855875045649\n",
      "\n",
      " Duration_minutes_180      57.248936044002775\n",
      "\n",
      " Duration_minutes_185      10.781192050651823\n",
      "\n",
      " Duration_minutes_190      3.8962105291358253\n",
      "\n",
      " Duration_minutes_195      11.848455577476148\n",
      "\n",
      " Duration_minutes_205      2.6762014017762907\n",
      "\n",
      " Duration_minutes_215      1.9623982552159327\n",
      "\n",
      " Duration_minutes_220      14.835155506619056\n",
      "\n",
      " Duration_minutes_230      0.41553698766758085\n",
      "\n",
      " Duration_minutes_235      3.186963846448587\n",
      "\n",
      " Duration_minutes_240      8.566042269678427\n",
      "\n",
      " Duration_minutes_245      0.1026508486657486\n",
      "\n",
      " Duration_minutes_250      1.5928657846002165\n",
      "\n",
      " Duration_minutes_255      0.4645554325342016\n",
      "\n",
      " Duration_minutes_260      1.7685214974522894\n",
      "\n",
      " Duration_minutes_265      17.991280023866995\n",
      "\n",
      " Duration_minutes_270      9.57873268238741\n",
      "\n",
      " Duration_minutes_275      4.57610035468615\n",
      "\n",
      " Duration_minutes_280      0.23573938173919914\n",
      "\n",
      " Duration_minutes_285      0.05209824270972991\n",
      "\n",
      " Duration_minutes_290      14.14115923310879\n",
      "\n",
      " Duration_minutes_295      5.658705462510547\n",
      "\n",
      " Duration_minutes_300      0.5105774003798219\n",
      "\n",
      " Duration_minutes_305      0.2966528705556863\n",
      "\n",
      " Duration_minutes_310      0.7399442035392882\n",
      "\n",
      " Duration_minutes_315      9.183041137489152\n",
      "\n",
      " Duration_minutes_320      2.8332715128468013\n",
      "\n",
      " Duration_minutes_325      1.0389628581268828\n",
      "\n",
      " Duration_minutes_330      10.207602578703593\n",
      "\n",
      " Duration_minutes_335      9.702914991161773\n",
      "\n",
      " Duration_minutes_340      1.835230318583284\n",
      "\n",
      " Duration_minutes_345      0.8344066596192151\n",
      "\n",
      " Duration_minutes_350      5.111447464780433\n",
      "\n",
      " Duration_minutes_355      1.2589556917727802\n",
      "\n",
      " Duration_minutes_360      6.391050265968069\n",
      "\n",
      " Duration_minutes_365      6.95270322580078\n",
      "\n",
      " Duration_minutes_370      3.4386935172859516\n",
      "\n",
      " Duration_minutes_375      15.59139974391644\n",
      "\n",
      " Duration_minutes_380      0.1787468780115414\n",
      "\n",
      " Duration_minutes_385      0.9688307141204416\n",
      "\n",
      " Duration_minutes_390      0.6046384018725665\n",
      "\n",
      " Duration_minutes_395      36.196006153568526\n",
      "\n",
      " Duration_minutes_400      11.89738873372532\n",
      "\n",
      " Duration_minutes_405      10.69840486658017\n",
      "\n",
      " Duration_minutes_410      0.36176733913897796\n",
      "\n",
      " Duration_minutes_415      0.8221362580055561\n",
      "\n",
      " Duration_minutes_420      12.395708479376792\n",
      "\n",
      " Duration_minutes_425      16.650610060113454\n",
      "\n",
      " Duration_minutes_430      0.5839162198375301\n",
      "\n",
      " Duration_minutes_435      5.245327218729117\n",
      "\n",
      " Duration_minutes_440      44.51253386965236\n",
      "\n",
      " Duration_minutes_445      0.03418648167329588\n",
      "\n",
      " Duration_minutes_450      29.12448959036886\n",
      "\n",
      " Duration_minutes_455      0.4845791233002936\n",
      "\n",
      " Duration_minutes_460      9.91270200513363\n",
      "\n",
      " Duration_minutes_465      9.437725888282257\n",
      "\n",
      " Duration_minutes_470      1.5141487893973187\n",
      "\n",
      " Duration_minutes_475      5.8522824532971365\n",
      "\n",
      " Duration_minutes_480      10.487065036567518\n",
      "\n",
      " Duration_minutes_485      5.312464095206523\n",
      "\n",
      " Duration_minutes_490      0.00601581533641187\n",
      "\n",
      " Duration_minutes_495      1.903203473000814\n",
      "\n",
      " Duration_minutes_500      0.0014277955266006111\n",
      "\n",
      " Duration_minutes_505      26.979056678361804\n",
      "\n",
      " Duration_minutes_510      9.102838881052191\n",
      "\n",
      " Duration_minutes_515      0.0012762662258611003\n",
      "\n",
      " Duration_minutes_520      8.482282752686684\n",
      "\n",
      " Duration_minutes_525      2.6699048039174227\n",
      "\n",
      " Duration_minutes_530      4.633390115691851\n",
      "\n",
      " Duration_minutes_535      11.843015175478222\n",
      "\n",
      " Duration_minutes_540      0.757709075305084\n",
      "\n",
      " Duration_minutes_545      0.34538140295874936\n",
      "\n",
      " Duration_minutes_550      14.061488303219692\n",
      "\n",
      " Duration_minutes_555      8.368617448053634\n",
      "\n",
      " Duration_minutes_560      1.3323448239906353\n",
      "\n",
      " Duration_minutes_565      6.8421243505689935\n",
      "\n",
      " Duration_minutes_570      20.290842116744827\n",
      "\n",
      " Duration_minutes_575      9.871420122462315\n",
      "\n",
      " Duration_minutes_580      0.2442459202413626\n",
      "\n",
      " Duration_minutes_585      6.820244755991184\n",
      "\n",
      " Duration_minutes_590      21.567354013916958\n",
      "\n",
      " Duration_minutes_595      3.1268145416717648\n",
      "\n",
      " Duration_minutes_600      16.451275197142675\n",
      "\n",
      " Duration_minutes_605      3.848938932349614\n",
      "\n",
      " Duration_minutes_610      9.560234546646903\n",
      "\n",
      " Duration_minutes_615      8.003146016606376\n",
      "\n",
      " Duration_minutes_620      10.964965119004571\n",
      "\n",
      " Duration_minutes_625      9.130060082340785\n",
      "\n",
      " Duration_minutes_630      1.171806746514339\n",
      "\n",
      " Duration_minutes_635      2.861414575694479\n",
      "\n",
      " Duration_minutes_640      7.1280433013485505\n",
      "\n",
      " Duration_minutes_645      0.1379675816796811\n",
      "\n",
      " Duration_minutes_650      2.646096738915429\n",
      "\n",
      " Duration_minutes_655      3.702200386443803\n",
      "\n",
      " Duration_minutes_660      14.303912016627358\n",
      "\n",
      " Duration_minutes_665      5.874621927358107\n",
      "\n",
      " Duration_minutes_670      2.5039766578382423\n",
      "\n",
      " Duration_minutes_675      5.279510033866353\n",
      "\n",
      " Duration_minutes_680      6.924013065550592\n",
      "\n",
      " Duration_minutes_685      10.786446139143584\n",
      "\n",
      " Duration_minutes_690      18.97309939919645\n",
      "\n",
      " Duration_minutes_695      7.228886272250525\n",
      "\n",
      " Duration_minutes_700      3.235037774335071\n",
      "\n",
      " Duration_minutes_705      9.018794396564218\n",
      "\n",
      " Duration_minutes_710      0.9643698585188555\n",
      "\n",
      " Duration_minutes_715      9.717039409940053\n",
      "\n",
      " Duration_minutes_720      5.859593219318621\n",
      "\n",
      " Duration_minutes_725      12.46185376730754\n",
      "\n",
      " Duration_minutes_730      19.65273742180858\n",
      "\n",
      " Duration_minutes_735      4.533580725819923\n",
      "\n",
      " Duration_minutes_740      17.78661245585539\n",
      "\n",
      " Duration_minutes_745      5.475161338533488\n",
      "\n",
      " Duration_minutes_750      9.59761382854289\n",
      "\n",
      " Duration_minutes_755      9.579402017668981\n",
      "\n",
      " Duration_minutes_760      2.259636503718444\n",
      "\n",
      " Duration_minutes_765      1.6185289374080445\n",
      "\n",
      " Duration_minutes_770      0.6628335229018166\n",
      "\n",
      " Duration_minutes_775      13.84843476930381\n",
      "\n",
      " Duration_minutes_780      13.156036354378053\n",
      "\n",
      " Duration_minutes_785      5.238962782971311\n",
      "\n",
      " Duration_minutes_790      0.05044977638856393\n",
      "\n",
      " Duration_minutes_795      3.6289740426628843\n",
      "\n",
      " Duration_minutes_800      38.77551667748715\n",
      "\n",
      " Duration_minutes_805      20.448934812230494\n",
      "\n",
      " Duration_minutes_810      14.118918601375304\n",
      "\n",
      " Duration_minutes_815      3.870680080696817\n",
      "\n",
      " Duration_minutes_820      nan\n",
      "\n",
      " Duration_minutes_825      1.7198702062679778\n",
      "\n",
      " Duration_minutes_830      4.427465299976553\n",
      "\n",
      " Duration_minutes_835      7.0825044175082486\n",
      "\n",
      " Duration_minutes_840      9.252482872783368\n",
      "\n",
      " Duration_minutes_845      6.401755652314615\n",
      "\n",
      " Duration_minutes_850      0.31904337707457764\n",
      "\n",
      " Duration_minutes_855      0.17726824471185665\n",
      "\n",
      " Duration_minutes_860      2.9629154035848466\n",
      "\n",
      " Duration_minutes_865      5.34262865987638\n",
      "\n",
      " Duration_minutes_870      5.94354735877455\n",
      "\n",
      " Duration_minutes_875      12.930604465604883\n",
      "\n",
      " Duration_minutes_880      0.5170987676624107\n",
      "\n",
      " Duration_minutes_885      5.909790359883011\n",
      "\n",
      " Duration_minutes_890      2.5815322039813435\n",
      "\n",
      " Duration_minutes_895      1.9493642203560217\n",
      "\n",
      " Duration_minutes_900      4.28979255270015\n",
      "\n",
      " Duration_minutes_905      1.3384477928046685\n",
      "\n",
      " Duration_minutes_910      8.075442786797165\n",
      "\n",
      " Duration_minutes_915      1.0111151462585095\n",
      "\n",
      " Duration_minutes_920      6.866778327819581\n",
      "\n",
      " Duration_minutes_925      3.4903030217060866\n",
      "\n",
      " Duration_minutes_930      2.727781389077434\n",
      "\n",
      " Duration_minutes_935      5.730120050323388\n",
      "\n",
      " Duration_minutes_940      0.6443001415135894\n",
      "\n",
      " Duration_minutes_945      0.42824252321640516\n",
      "\n",
      " Duration_minutes_950      5.273572817208512\n",
      "\n",
      " Duration_minutes_955      1.1027113237610422\n",
      "\n",
      " Duration_minutes_960      3.589000016814103\n",
      "\n",
      " Duration_minutes_965      0.028681305352070533\n",
      "\n",
      " Duration_minutes_970      4.810330382358164\n",
      "\n",
      " Duration_minutes_975      6.715437694386181e-07\n",
      "\n",
      " Duration_minutes_980      2.3006866112911415\n",
      "\n",
      " Duration_minutes_985      0.7949345045226835\n",
      "\n",
      " Duration_minutes_990      0.8575365756425097\n",
      "\n",
      " Duration_minutes_995      7.445701626254072\n",
      "\n",
      " Duration_minutes_1000      4.390656195767071\n",
      "\n",
      " Duration_minutes_1005      7.12351068961426\n",
      "\n",
      " Duration_minutes_1010      1.4057768051779738\n",
      "\n",
      " Duration_minutes_1015      8.091393759649007\n",
      "\n",
      " Duration_minutes_1025      11.555843193224595\n",
      "\n",
      " Duration_minutes_1030      0.9422021794953086\n",
      "\n",
      " Duration_minutes_1035      6.560769460408135\n",
      "\n",
      " Duration_minutes_1040      2.6590722893199707\n",
      "\n",
      " Duration_minutes_1045      7.295747267326845\n",
      "\n",
      " Duration_minutes_1050      6.346542698528497\n",
      "\n",
      " Duration_minutes_1055      3.5421122338010473\n",
      "\n",
      " Duration_minutes_1060      2.252391555873518\n",
      "\n",
      " Duration_minutes_1065      0.3518393646122885\n",
      "\n",
      " Duration_minutes_1070      1.0776288683737467\n",
      "\n",
      " Duration_minutes_1075      5.089161071046903\n",
      "\n",
      " Duration_minutes_1080      2.9634501910850948\n",
      "\n",
      " Duration_minutes_1090      13.187019095206278\n",
      "\n",
      " Duration_minutes_1095      1.220615179034885\n",
      "\n",
      " Duration_minutes_1100      11.056327538019419\n",
      "\n",
      " Duration_minutes_1105      9.430757515726834\n",
      "\n",
      " Duration_minutes_1110      2.1332421148460354\n",
      "\n",
      " Duration_minutes_1115      nan\n",
      "\n",
      " Duration_minutes_1120      1.289606158104111\n",
      "\n",
      " Duration_minutes_1125      10.070074140206204\n",
      "\n",
      " Duration_minutes_1130      3.7116357317491486\n",
      "\n",
      " Duration_minutes_1135      5.457666511875814\n",
      "\n",
      " Duration_minutes_1140      1.4837389464578772\n",
      "\n",
      " Duration_minutes_1145      3.581922929390998\n",
      "\n",
      " Duration_minutes_1150      2.1476658392125567\n",
      "\n",
      " Duration_minutes_1155      1.0256464017538838\n",
      "\n",
      " Duration_minutes_1160      nan\n",
      "\n",
      " Duration_minutes_1165      19.935816167727143\n",
      "\n",
      " Duration_minutes_1170      0.15223734250646034\n",
      "\n",
      " Duration_minutes_1175      1.2086249257985586\n",
      "\n",
      " Duration_minutes_1180      0.6555914734445343\n",
      "\n",
      " Duration_minutes_1185      7.587003547882774\n",
      "\n",
      " Duration_minutes_1190      0.6842467716211024\n",
      "\n",
      " Duration_minutes_1195      5.21529426220332\n",
      "\n",
      " Duration_minutes_1200      12.406440156691273\n",
      "\n",
      " Duration_minutes_1205      5.6619219499735065\n",
      "\n",
      " Duration_minutes_1210      10.642953319442189\n",
      "\n",
      " Duration_minutes_1215      7.506650122466074\n",
      "\n",
      " Duration_minutes_1220      6.717632161425289\n",
      "\n",
      " Duration_minutes_1225      9.454653826942499\n",
      "\n",
      " Duration_minutes_1235      2.7136295606609555\n",
      "\n",
      " Duration_minutes_1240      2.0835790897114617\n",
      "\n",
      " Duration_minutes_1245      3.02415028422571\n",
      "\n",
      " Duration_minutes_1250      0.025786858112776173\n",
      "\n",
      " Duration_minutes_1255      3.582593319485782\n",
      "\n",
      " Duration_minutes_1260      8.73472456797823\n",
      "\n",
      " Duration_minutes_1265      5.593656712341247\n",
      "\n",
      " Duration_minutes_1270      7.17755644944609\n",
      "\n",
      " Duration_minutes_1275      8.630745162333488\n",
      "\n",
      " Duration_minutes_1280      10.923013855103363\n",
      "\n",
      " Duration_minutes_1285      11.005467827766983\n",
      "\n",
      " Duration_minutes_1290      6.959377818530205\n",
      "\n",
      " Duration_minutes_1295      11.527169601646726\n",
      "\n",
      " Duration_minutes_1300      4.972773144077412\n",
      "\n",
      " Duration_minutes_1305      1.701732182618538\n",
      "\n",
      " Duration_minutes_1310      2.416052964565235\n",
      "\n",
      " Duration_minutes_1315      1.2425966248116305\n",
      "\n",
      " Duration_minutes_1320      10.884448843716152\n",
      "\n",
      " Duration_minutes_1325      6.700453875617843\n",
      "\n",
      " Duration_minutes_1330      3.4889564914603985\n",
      "\n",
      " Duration_minutes_1335      2.509755705267515\n",
      "\n",
      " Duration_minutes_1345      4.819262404641323\n",
      "\n",
      " Duration_minutes_1350      5.1464729311179065\n",
      "\n",
      " Duration_minutes_1355      4.439548698429256\n",
      "\n",
      " Duration_minutes_1360      0.6445260627919326\n",
      "\n",
      " Duration_minutes_1365      17.084660094138123\n",
      "\n",
      " Duration_minutes_1375      16.74817008458305\n",
      "\n",
      " Duration_minutes_1380      18.351208925955454\n",
      "\n",
      " Duration_minutes_1385      7.034212802451147\n",
      "\n",
      " Duration_minutes_1390      6.154270544947105\n",
      "\n",
      " Duration_minutes_1395      13.287671182740649\n",
      "\n",
      " Duration_minutes_1400      2.0289821530490717\n",
      "\n",
      " Duration_minutes_1405      0.7376922851124802\n",
      "\n",
      " Duration_minutes_1410      4.736568519465947\n",
      "\n",
      " Duration_minutes_1415      9.376757989967103\n",
      "\n",
      " Duration_minutes_1420      5.539107840554765\n",
      "\n",
      " Duration_minutes_1425      11.344252746782473\n",
      "\n",
      " Duration_minutes_1430      10.678844731937115\n",
      "\n",
      " Duration_minutes_1435      2.16790745593383\n",
      "\n",
      " Duration_minutes_1440      0.0003948486780336082\n",
      "\n",
      " Duration_minutes_1445      1.0470924333098561\n",
      "\n",
      " Duration_minutes_1450      8.920286152625449\n",
      "\n",
      " Duration_minutes_1455      4.564333395116692\n",
      "\n",
      " Duration_minutes_1460      1.220615179034885\n",
      "\n",
      " Duration_minutes_1465      1.5065895789385055\n",
      "\n",
      " Duration_minutes_1470      8.6600584124721\n",
      "\n",
      " Duration_minutes_1475      12.637422174887565\n",
      "\n",
      " Duration_minutes_1480      9.116339400442106\n",
      "\n",
      " Duration_minutes_1485      8.651698960431462\n",
      "\n",
      " Duration_minutes_1490      11.157334703600906\n",
      "\n",
      " Duration_minutes_1495      5.889347874420142\n",
      "\n",
      " Duration_minutes_1500      4.228804985483058\n",
      "\n",
      " Duration_minutes_1505      2.6247931633879595\n",
      "\n",
      " Duration_minutes_1510      0.03802085705486241\n",
      "\n",
      " Duration_minutes_1515      0.122590946947115\n",
      "\n",
      " Duration_minutes_1520      4.184346845844295\n",
      "\n",
      " Duration_minutes_1525      4.042112266701266\n",
      "\n",
      " Duration_minutes_1530      5.575834031160428\n",
      "\n",
      " Duration_minutes_1535      0.0001917171629537176\n",
      "\n",
      " Duration_minutes_1540      2.725486184094576\n",
      "\n",
      " Duration_minutes_1545      14.160102640079296\n",
      "\n",
      " Duration_minutes_1550      1.4245649101678166\n",
      "\n",
      " Duration_minutes_1555      1.1790957968850788\n",
      "\n",
      " Duration_minutes_1560      7.086688920786125\n",
      "\n",
      " Duration_minutes_1565      1.2375761251836848\n",
      "\n",
      " Duration_minutes_1570      9.539396985908594\n",
      "\n",
      " Duration_minutes_1575      1.614702721472889\n",
      "\n",
      " Duration_minutes_1580      3.9054622682528968\n",
      "\n",
      " Duration_minutes_1585      1.3148723528033754\n",
      "\n",
      " Duration_minutes_1590      1.003074874046588\n",
      "\n",
      " Duration_minutes_1595      5.443925343573154\n",
      "\n",
      " Duration_minutes_1600      6.9034589427045185\n",
      "\n",
      " Duration_minutes_1605      0.050406562218103405\n",
      "\n",
      " Duration_minutes_1610      2.1204015515299197\n",
      "\n",
      " Duration_minutes_1615      12.512684424522272\n",
      "\n",
      " Duration_minutes_1620      13.050541388314405\n",
      "\n",
      " Duration_minutes_1625      1.9398780008995435\n",
      "\n",
      " Duration_minutes_1630      8.882761596789276\n",
      "\n",
      " Duration_minutes_1640      0.4435724081411901\n",
      "\n",
      " Duration_minutes_1645      0.9686946284759224\n",
      "\n",
      " Duration_minutes_1650      0.8478284817963242\n",
      "\n",
      " Duration_minutes_1655      4.211729816667727\n",
      "\n",
      " Duration_minutes_1660      4.734458669329557\n",
      "\n",
      " Duration_minutes_1665      9.631608817364198\n",
      "\n",
      " Duration_minutes_1670      2.116263342898626\n",
      "\n",
      " Duration_minutes_1680      3.6828664083814777\n",
      "\n",
      " Duration_minutes_1685      7.166479612596991\n",
      "\n",
      " Duration_minutes_1690      0.3493522447627856\n",
      "\n",
      " Duration_minutes_1695      0.5250312858422675\n",
      "\n",
      " Duration_minutes_1700      3.940746663686676\n",
      "\n",
      " Duration_minutes_1705      4.957440619672468\n",
      "\n",
      " Duration_minutes_1710      0.7736715930932653\n",
      "\n",
      " Duration_minutes_1720      0.40721270215990374\n",
      "\n",
      " Duration_minutes_1730      8.070012678956198\n",
      "\n",
      " Duration_minutes_1735      0.02136511380260846\n",
      "\n",
      " Duration_minutes_1745      1.4960064897946959\n",
      "\n",
      " Duration_minutes_1750      nan\n",
      "\n",
      " Duration_minutes_1760      11.867915548424842\n",
      "\n",
      " Duration_minutes_1770      2.3029960624942\n",
      "\n",
      " Duration_minutes_1775      13.034493107221557\n",
      "\n",
      " Duration_minutes_1780      0.47437198111584306\n",
      "\n",
      " Duration_minutes_1790      1.818916234489242\n",
      "\n",
      " Duration_minutes_1795      3.1319744411949104\n",
      "\n",
      " Duration_minutes_1800      0.6296967988176521\n",
      "\n",
      " Duration_minutes_1810      0.5554442760709261\n",
      "\n",
      " Duration_minutes_1815      0.011284147341464172\n",
      "\n",
      " Duration_minutes_1820      9.0121121950301\n",
      "\n",
      " Duration_minutes_1825      0.6715814201688779\n",
      "\n",
      " Duration_minutes_1830      0.7701671330378203\n",
      "\n",
      " Duration_minutes_1840      3.998306153826028\n",
      "\n",
      " Duration_minutes_1845      nan\n",
      "\n",
      " Duration_minutes_1855      2.6006006255364063\n",
      "\n",
      " Duration_minutes_1890      0.7854993522767976\n",
      "\n",
      " Duration_minutes_1900      1.3605432365854118\n",
      "\n",
      " Duration_minutes_1915      2.039327134022909\n",
      "\n",
      " Duration_minutes_1925      2.092663103988358\n",
      "\n",
      " Duration_minutes_1940      2.2331126005042474\n",
      "\n",
      " Duration_minutes_1950      0.5029116818824529\n",
      "\n",
      " Duration_minutes_1975      nan\n",
      "\n",
      " Duration_minutes_1995      1.1365124283154726\n",
      "\n",
      " Duration_minutes_2000      nan\n",
      "\n",
      " Duration_minutes_2025      0.32037194712518663\n",
      "\n",
      " Duration_minutes_2040      0.6718392135732345\n",
      "\n",
      " Duration_minutes_2045      3.8090326649587283\n",
      "\n",
      " Duration_minutes_2065      1.0831566229366425\n",
      "\n",
      " Duration_minutes_2070      2.0993973081338644\n",
      "\n",
      " Duration_minutes_2105      1.4841788921210055\n",
      "\n",
      " Duration_minutes_2115      0.3525623886405534\n",
      "\n",
      " Duration_minutes_2120      0.9539321241273526\n",
      "\n",
      " Duration_minutes_2135      3.0533059406427627\n",
      "\n",
      " Duration_minutes_2170      2.005940111971583\n",
      "\n",
      " Duration_minutes_2185      0.3044894859622591\n",
      "\n",
      " Duration_minutes_2240      1.6386485763423817\n",
      "\n",
      " Duration_minutes_2245      4.760318011885271\n",
      "\n",
      " Duration_minutes_2280      1.4085362927545486\n",
      "\n",
      " Duration_minutes_2295      1.1383018584224835\n",
      "\n",
      " Duration_minutes_2300      3.92311774125386\n",
      "\n",
      " Duration_minutes_2315      3.864270120795245\n",
      "\n",
      " Duration_minutes_2420      0.5331772921388287\n",
      "\n",
      " Duration_minutes_2480      nan\n",
      "\n",
      " Duration_minutes_2525      0.5029116818824529\n",
      "\n",
      " Duration_minutes_2565      0.7965644625106759\n",
      "\n",
      " Duration_minutes_2820      3.1068761176765167\n",
      "\n",
      " Duration_minutes_2860      3.3222352801737682\n",
      "\n",
      " Dep_Time_minutes_0      137.0216427031268\n",
      "\n",
      " Dep_Time_minutes_5      0.3268214292559559\n",
      "\n",
      " Dep_Time_minutes_10      69.57761296683958\n",
      "\n",
      " Dep_Time_minutes_15      20.189963058994515\n",
      "\n",
      " Dep_Time_minutes_20      114.24148397325527\n",
      "\n",
      " Dep_Time_minutes_25      38.124930472833285\n",
      "\n",
      " Dep_Time_minutes_30      10.813765699265057\n",
      "\n",
      " Dep_Time_minutes_35      20.31677864153901\n",
      "\n",
      " Dep_Time_minutes_40      14.774206977213145\n",
      "\n",
      " Dep_Time_minutes_45      26.913128326951\n",
      "\n",
      " Dep_Time_minutes_50      59.17405589372629\n",
      "\n",
      " Dep_Time_minutes_55      23.929246274457675\n",
      "\n",
      " Airline_0      136.30332822991969\n",
      "\n",
      " Airline_1      46.02015371611042\n",
      "\n",
      " Airline_2      59.2912855982246\n",
      "\n",
      " Airline_3      1203.9515844409655\n",
      "\n",
      " Airline_4      1577.9065640108142\n",
      "\n",
      " Airline_5      236.49135275017565\n",
      "\n",
      " Airline_6      2.0389601316655557\n",
      "\n",
      " Airline_7      1124.4765224311986\n",
      "\n",
      " Airline_9      8.749420773269819\n",
      "\n",
      " Date_of_Journey_month_3      328.5865815411869\n",
      "\n",
      " Date_of_Journey_month_4      471.78239850183394\n",
      "\n",
      " Date_of_Journey_month_5      0.047219508973455615\n",
      "\n",
      " Date_of_Journey_month_6      4.741446139559427\n",
      "\n",
      " Total_Stops_0      1805.21946959078\n",
      "\n",
      " Total_Stops_1      740.0114970762899\n",
      "\n",
      " Total_Stops_2      27.32816710885656\n",
      "\n",
      " Total_Stops_4      7294.647009763595\n",
      "\n",
      " Dep_Time_hour_0      6.014072163803856\n",
      "\n",
      " Dep_Time_hour_1      26.94041741139718\n",
      "\n",
      " Dep_Time_hour_2      6.150558466172219\n",
      "\n",
      " Dep_Time_hour_3      2.6154294569626937\n",
      "\n",
      " Dep_Time_hour_4      17.690347062681766\n",
      "\n",
      " Dep_Time_hour_5      0.2064281881098192\n",
      "\n",
      " Dep_Time_hour_6      6.4649430757381205\n",
      "\n",
      " Dep_Time_hour_7      0.8651947614870572\n",
      "\n",
      " Dep_Time_hour_8      43.8121077301397\n",
      "\n",
      " Dep_Time_hour_9      15.907596859518673\n",
      "\n",
      " Dep_Time_hour_10      0.5165391726780549\n",
      "\n",
      " Dep_Time_hour_11      2.55381839906888\n",
      "\n",
      " Dep_Time_hour_12      0.026821109169397818\n",
      "\n",
      " Dep_Time_hour_13      7.080479640953262\n",
      "\n",
      " Dep_Time_hour_14      16.534588539717802\n",
      "\n",
      " Dep_Time_hour_15      33.2213874510071\n",
      "\n",
      " Dep_Time_hour_16      22.309194128416173\n",
      "\n",
      " Dep_Time_hour_17      0.06879260585635566\n",
      "\n",
      " Dep_Time_hour_18      20.40488412093353\n",
      "\n",
      " Dep_Time_hour_19      24.388837662141977\n",
      "\n",
      " Dep_Time_hour_20      12.357337736961265\n",
      "\n",
      " Dep_Time_hour_21      9.139545444711349\n",
      "\n",
      " Dep_Time_hour_22      68.68817741781058\n",
      "\n",
      " Dep_Time_hour_23      2.5445871993195004\n",
      "\n",
      " Source_0      124.42508646972206\n",
      "\n",
      " Source_1      300.7694126614489\n",
      "\n",
      " Source_2      891.9717054420782\n",
      "\n",
      " Source_3      7.8512289683840555\n",
      "\n",
      " Source_4      935.0112943091164\n",
      "\n",
      " Destination_0      7.8512289683840555\n",
      "\n",
      " Destination_1      891.9717054420782\n",
      "\n",
      " Destination_2      889.1857359063052\n",
      "\n",
      " Destination_3      935.0112943091164\n",
      "\n",
      " Destination_4      300.7694126614489\n",
      "\n",
      " Destination_5      245.2823291518944\n",
      "\n",
      " IsMonthEnd_0      2.2119395441281418\n",
      "\n",
      " IsMonthEnd_1      2.2119395441284877\n",
      "\n",
      " TimeOfDay_0      3.8879957139355725\n",
      "\n",
      " TimeOfDay_1      16.77455140201054\n",
      "\n",
      " TimeOfDay_2      1.1073258509657133\n",
      "\n",
      " TimeOfDay_3      2.483188418130258\n",
      "\n",
      " TimeOfDay_4      65.42539366375749\n",
      "\n",
      " TimeOfDay_5      37.01571028005701\n",
      "\n",
      " Date_of_Journey_day_1      18.26302920975236\n",
      "\n",
      " Date_of_Journey_day_3      7.107943510375244\n",
      "\n",
      " Date_of_Journey_day_6      63.463133754976184\n",
      "\n",
      " Date_of_Journey_day_9      15.038561728408357\n",
      "\n",
      " Date_of_Journey_day_12      0.8410116030518324\n",
      "\n",
      " Date_of_Journey_day_15      48.343702396901634\n",
      "\n",
      " Date_of_Journey_day_18      17.810924521691106\n",
      "\n",
      " Date_of_Journey_day_21      23.65493558206656\n",
      "\n",
      " Date_of_Journey_day_24      2.759983458594187\n",
      "\n",
      " Date_of_Journey_day_27      nan\n",
      "\n",
      " TimeOfMonth_0      97.91570540909545\n",
      "\n",
      " TimeOfMonth_1      45.84569816442909\n",
      "\n",
      " TimeOfMonth_2      26.088246103365\n"
     ]
    }
   ],
   "source": [
    "def select_features(x_train,y_train,x_test,x_eval1,k):\n",
    "    fs = SelectKBest(score_func = f_regression,k=k)\n",
    "    fs.fit(x_train,y_train)\n",
    "    col_indices = fs.get_support(indices=True)\n",
    "    x_features = x_train.columns[col_indices]\n",
    "    x_train_fs = pd.DataFrame(fs.transform(x_train),columns=x_features)\n",
    "    x_test_fs = pd.DataFrame(fs.transform(x_test),columns=x_features)\n",
    "    x_eval_fs = pd.DataFrame(fs.transform(x_eval1),columns=x_features)\n",
    "    return x_train_fs,x_test_fs,x_eval_fs,fs,x_features,col_indices\n",
    "\n",
    "\n",
    "x_train_fs,x_test_fs,x_eval_fs,fs,x_features,col_indices = select_features(x_train,y_train,x_test,x_eval,'all')\n",
    "\n",
    "for i in range(len(fs.scores_[col_indices])):\n",
    "    print(\"\\n\",x_features[i],\"    \",fs.scores_[col_indices][i])\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:46.443022Z",
     "iopub.status.busy": "2021-02-02T12:57:46.442268Z",
     "iopub.status.idle": "2021-02-02T12:57:46.445121Z",
     "shell.execute_reply": "2021-02-02T12:57:46.444512Z"
    },
    "papermill": {
     "duration": 0.203405,
     "end_time": "2021-02-02T12:57:46.445291",
     "exception": false,
     "start_time": "2021-02-02T12:57:46.241886",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "reg_metrics = dict()\n",
    "predicted_price = dict()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:46.998540Z",
     "iopub.status.busy": "2021-02-02T12:57:46.997452Z",
     "iopub.status.idle": "2021-02-02T12:57:47.003966Z",
     "shell.execute_reply": "2021-02-02T12:57:47.003349Z"
    },
    "papermill": {
     "duration": 0.362174,
     "end_time": "2021-02-02T12:57:47.004135",
     "exception": false,
     "start_time": "2021-02-02T12:57:46.641961",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8894"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gc.collect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:57:47.406066Z",
     "iopub.status.busy": "2021-02-02T12:57:47.405413Z",
     "iopub.status.idle": "2021-02-02T12:57:47.419367Z",
     "shell.execute_reply": "2021-02-02T12:57:47.419915Z"
    },
    "papermill": {
     "duration": 0.218191,
     "end_time": "2021-02-02T12:57:47.420120",
     "exception": false,
     "start_time": "2021-02-02T12:57:47.201929",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Airline                 -0.028410\n",
       "Source                   0.030118\n",
       "Destination             -0.096020\n",
       "Total_Stops             -0.599452\n",
       "Additional_Info         -0.060548\n",
       "Price                    1.000000\n",
       "Date_of_Journey_month   -0.101721\n",
       "Date_of_Journey_day     -0.154805\n",
       "Dep_Time_hour            0.004528\n",
       "Dep_Time_minutes        -0.037425\n",
       "Duration_minutes         0.540753\n",
       "IsWeekEnd                0.034507\n",
       "TimeOfDay               -0.054937\n",
       "TimeOfMonth             -0.151694\n",
       "WeekDay                  0.064349\n",
       "IsMonthEnd               0.010252\n",
       "Name: Price, dtype: float64"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.corr()['Price']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.197069,
     "end_time": "2021-02-02T12:57:47.812787",
     "exception": false,
     "start_time": "2021-02-02T12:57:47.615718",
     "status": "completed"
    },
    "tags": []
   },
   
  },
    "tags": []
   },
   "source": [
    "### DECISION TREE REGRESSOR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:59:07.988086Z",
     "iopub.status.busy": "2021-02-02T12:59:07.986611Z",
     "iopub.status.idle": "2021-02-02T12:59:08.127294Z",
     "shell.execute_reply": "2021-02-02T12:59:08.126240Z"
    },
    "papermill": {
     "duration": 0.379156,
     "end_time": "2021-02-02T12:59:08.127584",
     "exception": false,
     "start_time": "2021-02-02T12:59:07.748428",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "METRICS  :\n",
      "\n",
      "Mean Absolute Error :   0.04738715634274665 \n",
      "Score :    0.783891508779839 \n",
      "Mean Squared Error :   0.004862325403767865 \n",
      "Root Mean Squared Error :   0.06973037647803047 \n",
      "R2 Square :   0.8312160414004535 \n",
      "Median Absolute Score :   0.031004899371648187 \n",
      "Explained Variance Score :   0.8390829097217977\n"
     ]
    }
   ],
   "source": [
    "dtr = DecisionTreeRegressor(max_depth = 8,random_state= 2)\n",
    "dtr.fit(x_train,y_train)\n",
    "y_pred1 = dtr.predict(x_eval)\n",
    "mean_abs_error,mean_sq_error,root_mean_sq_error,r2_scr,median_abs_score,explained_variance = evaluate_metrics(x_eval,y_eval,y_pred,dtr)\n",
    "scr = dtr.score(x_eval,y_eval)\n",
    "print(\"METRICS  :\\n\\nMean Absolute Error :  \",mean_abs_error,\"\\nScore :   \",scr,\"\\nMean Squared Error :  \",mean_sq_error,\"\\nRoot Mean Squared Error :  \",root_mean_sq_error,\"\\nR2 Square :  \",r2_scr,\"\\nMedian Absolute Score :  \",median_abs_score,\"\\nExplained Variance Score :  \",explained_variance)   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:59:08.631705Z",
     "iopub.status.busy": "2021-02-02T12:59:08.630447Z",
     "iopub.status.idle": "2021-02-02T12:59:08.914105Z",
     "shell.execute_reply": "2021-02-02T12:59:08.913485Z"
    },
    "papermill": {
     "duration": 0.521079,
     "end_time": "2021-02-02T12:59:08.914290",
     "exception": false,
     "start_time": "2021-02-02T12:59:08.393211",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
      "[Parallel(n_jobs=1)]: Done 100 out of 100 | elapsed:    0.0s finished\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "reg_metrics['DECISION TREE'] = [mean_abs_error,scr,mean_sq_error,root_mean_sq_error,r2_scr,median_abs_score,explained_variance]\n",
    "predicted_price['decision_tree_price'] = np.exp(y_s.inverse_transform(dtr.predict(x_test_fs).reshape(rfr.predict(x_test_fs).shape[0],1))).reshape(ridge_mod.predict(x_test_fs).shape[0]).round()\n",
    "plot_regression_line(x_eval.index,y_eval,y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.218654,
     "end_time": "2021-02-02T12:59:09.353622",
     "exception": false,
     "start_time": "2021-02-02T12:59:09.134968",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 5. XGB REGRESSOR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:59:09.806243Z",
     "iopub.status.busy": "2021-02-02T12:59:09.805155Z",
     "iopub.status.idle": "2021-02-02T12:59:19.289369Z",
     "shell.execute_reply": "2021-02-02T12:59:19.295845Z"
    },
    "papermill": {
     "duration": 9.728012,
     "end_time": "2021-02-02T12:59:19.296300",
     "exception": false,
     "start_time": "2021-02-02T12:59:09.568288",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "METRICS  :\n",
      "\n",
      "Mean Absolute Error :   0.048741902746080486 \n",
      "Score :    0.802228792123291 \n",
      "Mean Squared Error :   0.005697389587089354 \n",
      "Root Mean Squared Error :   0.07548105449110627 \n",
      "R2 Square :   0.802228792123291 \n",
      "Median Absolute Score :   0.028104661331367353 \n",
      "Explained Variance Score :   0.8195210948986186\n"
     ]
    }
   ],
   "source": [
    "xgb_model = xgb.XGBRegressor(max_depth = 12,eta = 0.3,n_estimators = 100,objective = 'reg:squarederror',gamma = 0.01)\n",
    "xgb_model.fit(x_train,y_train)\n",
    "y_pred = xgb_model.predict(x_eval)\n",
    "mean_abs_error,mean_sq_error,root_mean_sq_error,r2_scr,median_abs_score,explained_variance = evaluate_metrics(x_eval,y_eval,y_pred,dtr)\n",
    "scr = xgb_model.score(x_eval,y_eval)\n",
    "print(\"METRICS  :\\n\\nMean Absolute Error :  \",mean_abs_error,\"\\nScore :   \",scr,\"\\nMean Squared Error :  \",mean_sq_error,\"\\nRoot Mean Squared Error :  \",root_mean_sq_error,\"\\nR2 Square :  \",r2_scr,\"\\nMedian Absolute Score :  \",median_abs_score,\"\\nExplained Variance Score :  \",explained_variance)   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:59:19.771105Z",
     "iopub.status.busy": "2021-02-02T12:59:19.770347Z",
     "iopub.status.idle": "2021-02-02T12:59:20.071288Z",
     "shell.execute_reply": "2021-02-02T12:59:20.071834Z"
    },
    "papermill": {
     "duration": 0.525143,
     "end_time": "2021-02-02T12:59:20.072049",
     "exception": false,
     "start_time": "2021-02-02T12:59:19.546906",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
      "[Parallel(n_jobs=1)]: Done 100 out of 100 | elapsed:    0.0s finished\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x_test = x_test[x_train.columns]\n",
    "reg_metrics['XGB_REGRESSION'] = [mean_abs_error,scr,mean_sq_error,root_mean_sq_error,r2_scr,median_abs_score,explained_variance]\n",
    "predicted_price['xgb_regression_price'] = np.exp(y_s.inverse_transform(xgb_model.predict(x_test).reshape(rfr.predict(x_test_fs).shape[0],1))).reshape(ridge_mod.predict(x_test_fs).shape[0]).round()\n",
    "plot_regression_line(x_eval.index,y_eval,y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.221394,
     "end_time": "2021-02-02T12:59:20.584546",
     "exception": false,
     "start_time": "2021-02-02T12:59:20.363152",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### COMPUTED METRICS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:59:21.034112Z",
     "iopub.status.busy": "2021-02-02T12:59:21.033416Z",
     "iopub.status.idle": "2021-02-02T12:59:21.037485Z",
     "shell.execute_reply": "2021-02-02T12:59:21.036925Z"
    },
    "papermill": {
     "duration": 0.230091,
     "end_time": "2021-02-02T12:59:21.037654",
     "exception": false,
     "start_time": "2021-02-02T12:59:20.807563",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "metric_names = [\"MEAN ABSOLUTE ERROR\",\"MODEL SCORE\",\"MEAN SQUARED ERROR\",\"ROOT MEAN SQUARED ERROR\",\"R2 SCORE\",\"MEDIAN ABSOLUTE ERROR\",\"EXPLAINED VARIANCE SCORE\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:59:21.471344Z",
     "iopub.status.busy": "2021-02-02T12:59:21.470658Z",
     "iopub.status.idle": "2021-02-02T12:59:21.476342Z",
     "shell.execute_reply": "2021-02-02T12:59:21.477010Z"
    },
    "papermill": {
     "duration": 0.224878,
     "end_time": "2021-02-02T12:59:21.477203",
     "exception": false,
     "start_time": "2021-02-02T12:59:21.252325",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "for col in reg_metrics.keys():\n",
    "    reg_metrics[col] = np.around(reg_metrics[col],4).astype('str')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:59:21.940416Z",
     "iopub.status.busy": "2021-02-02T12:59:21.939721Z",
     "iopub.status.idle": "2021-02-02T12:59:21.959724Z",
     "shell.execute_reply": "2021-02-02T12:59:21.959012Z"
    },
    "papermill": {
     "duration": 0.257019,
     "end_time": "2021-02-02T12:59:21.959884",
     "exception": false,
     "start_time": "2021-02-02T12:59:21.702865",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RIDGE REGRESSION</th>\n",
       "      <th>LASSO REGRESSION</th>\n",
       "      <th>RANDOM FOREST</th>\n",
       "      <th>DECISION TREE</th>\n",
       "      <th>XGB_REGRESSION</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>MEAN ABSOLUTE ERROR</th>\n",
       "      <td>0.0746</td>\n",
       "      <td>0.0696</td>\n",
       "      <td>0.0474</td>\n",
       "      <td>0.0474</td>\n",
       "      <td>0.0487</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MODEL SCORE</th>\n",
       "      <td>0.7006</td>\n",
       "      <td>0.7249</td>\n",
       "      <td>0.8312</td>\n",
       "      <td>0.7839</td>\n",
       "      <td>0.8022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MEAN SQUARED ERROR</th>\n",
       "      <td>0.0086</td>\n",
       "      <td>0.0079</td>\n",
       "      <td>0.0049</td>\n",
       "      <td>0.0049</td>\n",
       "      <td>0.0057</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ROOT MEAN SQUARED ERROR</th>\n",
       "      <td>0.0929</td>\n",
       "      <td>0.089</td>\n",
       "      <td>0.0697</td>\n",
       "      <td>0.0697</td>\n",
       "      <td>0.0755</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>R2 SCORE</th>\n",
       "      <td>0.7006</td>\n",
       "      <td>0.7249</td>\n",
       "      <td>0.8312</td>\n",
       "      <td>0.8312</td>\n",
       "      <td>0.8022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MEDIAN ABSOLUTE ERROR</th>\n",
       "      <td>0.0625</td>\n",
       "      <td>0.058</td>\n",
       "      <td>0.031</td>\n",
       "      <td>0.031</td>\n",
       "      <td>0.0281</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>EXPLAINED VARIANCE SCORE</th>\n",
       "      <td>0.7291</td>\n",
       "      <td>0.7325</td>\n",
       "      <td>0.8391</td>\n",
       "      <td>0.8391</td>\n",
       "      <td>0.8195</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         RIDGE REGRESSION LASSO REGRESSION RANDOM FOREST  \\\n",
       "MEAN ABSOLUTE ERROR                0.0746           0.0696        0.0474   \n",
       "MODEL SCORE                        0.7006           0.7249        0.8312   \n",
       "MEAN SQUARED ERROR                 0.0086           0.0079        0.0049   \n",
       "ROOT MEAN SQUARED ERROR            0.0929            0.089        0.0697   \n",
       "R2 SCORE                           0.7006           0.7249        0.8312   \n",
       "MEDIAN ABSOLUTE ERROR              0.0625            0.058         0.031   \n",
       "EXPLAINED VARIANCE SCORE           0.7291           0.7325        0.8391   \n",
       "\n",
       "                         DECISION TREE XGB_REGRESSION  \n",
       "MEAN ABSOLUTE ERROR             0.0474         0.0487  \n",
       "MODEL SCORE                     0.7839         0.8022  \n",
       "MEAN SQUARED ERROR              0.0049         0.0057  \n",
       "ROOT MEAN SQUARED ERROR         0.0697         0.0755  \n",
       "R2 SCORE                        0.8312         0.8022  \n",
       "MEDIAN ABSOLUTE ERROR            0.031         0.0281  \n",
       "EXPLAINED VARIANCE SCORE        0.8391         0.8195  "
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "computed_metrics = pd.DataFrame(reg_metrics,index = metric_names).T\n",
    "computed_metrics.T"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.217006,
     "end_time": "2021-02-02T12:59:22.392194",
     "exception": false,
     "start_time": "2021-02-02T12:59:22.175188",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    " ### COMPUTATION OF OUR ESTIMATED PAYMENT DATE "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:59:22.850583Z",
     "iopub.status.busy": "2021-02-02T12:59:22.849645Z",
     "iopub.status.idle": "2021-02-02T12:59:22.856108Z",
     "shell.execute_reply": "2021-02-02T12:59:22.855386Z"
    },
    "papermill": {
     "duration": 0.246293,
     "end_time": "2021-02-02T12:59:22.856289",
     "exception": false,
     "start_time": "2021-02-02T12:59:22.609996",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Airline', 'Date_of_Journey', 'Source', 'Destination', 'Dep_Time',\n",
       "       'Arrival_Time', 'Duration', 'Total_Stops', 'Additional_Info'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data_1.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:59:23.338041Z",
     "iopub.status.busy": "2021-02-02T12:59:23.337195Z",
     "iopub.status.idle": "2021-02-02T12:59:23.342720Z",
     "shell.execute_reply": "2021-02-02T12:59:23.342054Z"
    },
    "papermill": {
     "duration": 0.251936,
     "end_time": "2021-02-02T12:59:23.342901",
     "exception": false,
     "start_time": "2021-02-02T12:59:23.090965",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "test_data_1.columns = ['AIRLINE','DATE OF JOURNEY','SOURCE','DESTINATION','DEPARTURE TIME','ARRIVAL TIME','DURATION','TOTAL STOPS','ADDITIONAL INFO']\n",
    "\n",
    "output = test_data_1\n",
    "\n",
    "output['PREDICTED PRICE(RIDGE REGRESION)'] = predicted_price['ridge_regression_price']\n",
    "output['PREDICTED PRICE(LASSO REGRESION)'] = predicted_price['lasso_regression_price']\n",
    "output['PREDICTED PRICE(RANDOM FOREST REGRESION)'] = predicted_price['random_forest_price']\n",
    "output['PREDICTED PRICE(DECISION TREE REGRESION)'] = predicted_price[ 'decision_tree_price']\n",
    "output['PREDICTED PRICE(XGBOOST REGRESION)'] = predicted_price['xgb_regression_price']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:59:23.831763Z",
     "iopub.status.busy": "2021-02-02T12:59:23.819144Z",
     "iopub.status.idle": "2021-02-02T12:59:23.855469Z",
     "shell.execute_reply": "2021-02-02T12:59:23.854708Z"
    },
    "papermill": {
     "duration": 0.275897,
     "end_time": "2021-02-02T12:59:23.855660",
     "exception": false,
     "start_time": "2021-02-02T12:59:23.579763",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AIRLINE</th>\n",
       "      <th>DATE OF JOURNEY</th>\n",
       "      <th>SOURCE</th>\n",
       "      <th>DESTINATION</th>\n",
       "      <th>DEPARTURE TIME</th>\n",
       "      <th>ARRIVAL TIME</th>\n",
       "      <th>DURATION</th>\n",
       "      <th>TOTAL STOPS</th>\n",
       "      <th>ADDITIONAL INFO</th>\n",
       "      <th>PREDICTED PRICE(RIDGE REGRESION)</th>\n",
       "      <th>PREDICTED PRICE(LASSO REGRESION)</th>\n",
       "      <th>PREDICTED PRICE(RANDOM FOREST REGRESION)</th>\n",
       "      <th>PREDICTED PRICE(DECISION TREE REGRESION)</th>\n",
       "      <th>PREDICTED PRICE(XGBOOST REGRESION)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>SpiceJet</td>\n",
       "      <td>12-05-2019</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>15:05</td>\n",
       "      <td>20:20</td>\n",
       "      <td>5h 15m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>4386.0</td>\n",
       "      <td>6187.0</td>\n",
       "      <td>15357.0</td>\n",
       "      <td>16102.0</td>\n",
       "      <td>5657.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Air India</td>\n",
       "      <td>15-03-2019</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>18:05</td>\n",
       "      <td>21:10</td>\n",
       "      <td>3h 5m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>10687.0</td>\n",
       "      <td>8234.0</td>\n",
       "      <td>9083.0</td>\n",
       "      <td>8957.0</td>\n",
       "      <td>5975.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>24-06-2019</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>11:45</td>\n",
       "      <td>25-06-2021 04:25</td>\n",
       "      <td>16h 40m</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>9237.0</td>\n",
       "      <td>7506.0</td>\n",
       "      <td>14519.0</td>\n",
       "      <td>16102.0</td>\n",
       "      <td>21535.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>SpiceJet</td>\n",
       "      <td>21-06-2019</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>09:00</td>\n",
       "      <td>11:25</td>\n",
       "      <td>2h 25m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>3715.0</td>\n",
       "      <td>6330.0</td>\n",
       "      <td>14559.0</td>\n",
       "      <td>16102.0</td>\n",
       "      <td>3913.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>27-04-2019</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>14:25</td>\n",
       "      <td>16:55</td>\n",
       "      <td>2h 30m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>5157.0</td>\n",
       "      <td>5696.0</td>\n",
       "      <td>15141.0</td>\n",
       "      <td>16102.0</td>\n",
       "      <td>4713.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2129</th>\n",
       "      <td>Air India</td>\n",
       "      <td>06-04-2019</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>17:00</td>\n",
       "      <td>19:45</td>\n",
       "      <td>2h 45m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>3612.0</td>\n",
       "      <td>7187.0</td>\n",
       "      <td>15423.0</td>\n",
       "      <td>16102.0</td>\n",
       "      <td>5793.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2130</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>01-04-2019</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>06:30</td>\n",
       "      <td>20:45</td>\n",
       "      <td>14h 15m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>4399.0</td>\n",
       "      <td>6921.0</td>\n",
       "      <td>15433.0</td>\n",
       "      <td>16102.0</td>\n",
       "      <td>12763.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2131</th>\n",
       "      <td>Multiple carriers</td>\n",
       "      <td>15-05-2019</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>08:45</td>\n",
       "      <td>19:00</td>\n",
       "      <td>10h 15m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>5429.0</td>\n",
       "      <td>7844.0</td>\n",
       "      <td>9083.0</td>\n",
       "      <td>8957.0</td>\n",
       "      <td>10349.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2132</th>\n",
       "      <td>Air India</td>\n",
       "      <td>03-03-2019</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>21:30</td>\n",
       "      <td>04-03-2021 19:15</td>\n",
       "      <td>21h 45m</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>6732.0</td>\n",
       "      <td>7177.0</td>\n",
       "      <td>15506.0</td>\n",
       "      <td>16102.0</td>\n",
       "      <td>13720.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2133</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>15-05-2019</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>15:15</td>\n",
       "      <td>18:10</td>\n",
       "      <td>2h 55m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>5755.0</td>\n",
       "      <td>7446.0</td>\n",
       "      <td>9145.0</td>\n",
       "      <td>8957.0</td>\n",
       "      <td>7237.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2134 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                AIRLINE DATE OF JOURNEY    SOURCE DESTINATION DEPARTURE TIME  \\\n",
       "0              SpiceJet      12-05-2019   Kolkata    Banglore          15:05   \n",
       "1             Air India      15-03-2019     Delhi      Cochin          18:05   \n",
       "2           Jet Airways      24-06-2019     Delhi      Cochin          11:45   \n",
       "3              SpiceJet      21-06-2019   Kolkata    Banglore          09:00   \n",
       "4                IndiGo      27-04-2019   Kolkata    Banglore          14:25   \n",
       "...                 ...             ...       ...         ...            ...   \n",
       "2129          Air India      06-04-2019  Banglore       Delhi          17:00   \n",
       "2130        Jet Airways      01-04-2019   Kolkata    Banglore          06:30   \n",
       "2131  Multiple carriers      15-05-2019     Delhi      Cochin          08:45   \n",
       "2132          Air India      03-03-2019     Delhi      Cochin          21:30   \n",
       "2133        Jet Airways      15-05-2019  Banglore       Delhi          15:15   \n",
       "\n",
       "          ARRIVAL TIME DURATION TOTAL STOPS ADDITIONAL INFO  \\\n",
       "0                20:20   5h 15m      1 stop         No info   \n",
       "1                21:10    3h 5m    non-stop         No info   \n",
       "2     25-06-2021 04:25  16h 40m     2 stops         No info   \n",
       "3                11:25   2h 25m    non-stop         No info   \n",
       "4                16:55   2h 30m    non-stop         No info   \n",
       "...                ...      ...         ...             ...   \n",
       "2129             19:45   2h 45m    non-stop         No info   \n",
       "2130             20:45  14h 15m      1 stop         No info   \n",
       "2131             19:00  10h 15m      1 stop         No info   \n",
       "2132  04-03-2021 19:15  21h 45m     2 stops         No info   \n",
       "2133             18:10   2h 55m    non-stop         No info   \n",
       "\n",
       "      PREDICTED PRICE(RIDGE REGRESION)  PREDICTED PRICE(LASSO REGRESION)  \\\n",
       "0                               4386.0                            6187.0   \n",
       "1                              10687.0                            8234.0   \n",
       "2                               9237.0                            7506.0   \n",
       "3                               3715.0                            6330.0   \n",
       "4                               5157.0                            5696.0   \n",
       "...                                ...                               ...   \n",
       "2129                            3612.0                            7187.0   \n",
       "2130                            4399.0                            6921.0   \n",
       "2131                            5429.0                            7844.0   \n",
       "2132                            6732.0                            7177.0   \n",
       "2133                            5755.0                            7446.0   \n",
       "\n",
       "      PREDICTED PRICE(RANDOM FOREST REGRESION)  \\\n",
       "0                                      15357.0   \n",
       "1                                       9083.0   \n",
       "2                                      14519.0   \n",
       "3                                      14559.0   \n",
       "4                                      15141.0   \n",
       "...                                        ...   \n",
       "2129                                   15423.0   \n",
       "2130                                   15433.0   \n",
       "2131                                    9083.0   \n",
       "2132                                   15506.0   \n",
       "2133                                    9145.0   \n",
       "\n",
       "      PREDICTED PRICE(DECISION TREE REGRESION)  \\\n",
       "0                                      16102.0   \n",
       "1                                       8957.0   \n",
       "2                                      16102.0   \n",
       "3                                      16102.0   \n",
       "4                                      16102.0   \n",
       "...                                        ...   \n",
       "2129                                   16102.0   \n",
       "2130                                   16102.0   \n",
       "2131                                    8957.0   \n",
       "2132                                   16102.0   \n",
       "2133                                    8957.0   \n",
       "\n",
       "      PREDICTED PRICE(XGBOOST REGRESION)  \n",
       "0                                 5657.0  \n",
       "1                                 5975.0  \n",
       "2                                21535.0  \n",
       "3                                 3913.0  \n",
       "4                                 4713.0  \n",
       "...                                  ...  \n",
       "2129                              5793.0  \n",
       "2130                             12763.0  \n",
       "2131                             10349.0  \n",
       "2132                             13720.0  \n",
       "2133                              7237.0  \n",
       "\n",
       "[2134 rows x 14 columns]"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:59:24.309618Z",
     "iopub.status.busy": "2021-02-02T12:59:24.308909Z",
     "iopub.status.idle": "2021-02-02T12:59:24.338350Z",
     "shell.execute_reply": "2021-02-02T12:59:24.338922Z"
    },
    "papermill": {
     "duration": 0.259868,
     "end_time": "2021-02-02T12:59:24.339188",
     "exception": false,
     "start_time": "2021-02-02T12:59:24.079320",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "output['PREDICTED PRICE(RANDOM FOREST REGRESION)'].to_csv('PREDICTED PRICE(RANDOM FOREST REGRESION).csv')\n",
    "output['PREDICTED PRICE(XGBOOST REGRESION)'].to_csv('PREDICTED PRICE(XGBOOST REGRESION).csv')\n",
    "output['PREDICTED PRICE(DECISION TREE REGRESION)'].to_csv('PREDICTED PRICE(DECISION TREE REGRESION).csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.233176,
     "end_time": "2021-02-02T12:59:24.800397",
     "exception": false,
     "start_time": "2021-02-02T12:59:24.567221",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### FINAL ROOT MEAN SQUARE VALUES"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T12:59:25.262117Z",
     "iopub.status.busy": "2021-02-02T12:59:25.257858Z",
     "iopub.status.idle": "2021-02-02T12:59:25.267752Z",
     "shell.execute_reply": "2021-02-02T12:59:25.267049Z"
    },
    "papermill": {
     "duration": 0.243031,
     "end_time": "2021-02-02T12:59:25.267940",
     "exception": false,
     "start_time": "2021-02-02T12:59:25.024909",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RIDGE REGRESSION</th>\n",
       "      <th>LASSO REGRESSION</th>\n",
       "      <th>RANDOM FOREST</th>\n",
       "      <th>DECISION TREE</th>\n",
       "      <th>XGB_REGRESSION</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>ROOT MEAN SQUARED ERROR</th>\n",
       "      <td>0.0929</td>\n",
       "      <td>0.089</td>\n",
       "      <td>0.0697</td>\n",
       "      <td>0.0697</td>\n",
       "      <td>0.0755</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        RIDGE REGRESSION LASSO REGRESSION RANDOM FOREST  \\\n",
       "ROOT MEAN SQUARED ERROR           0.0929            0.089        0.0697   \n",
       "\n",
       "                        DECISION TREE XGB_REGRESSION  \n",
       "ROOT MEAN SQUARED ERROR        0.0697         0.0755  "
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "computed_metrics[\"ROOT MEAN SQUARED ERROR\"].to_frame().T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "papermill": {
     "duration": 0.222589,
     "end_time": "2021-02-02T12:59:25.713020",
     "exception": false,
     "start_time": "2021-02-02T12:59:25.490431",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.9"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 225.145166,
   "end_time": "2021-02-02T12:59:26.651279",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2021-02-02T12:55:41.506113",
   "version": "2.2.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
